%%%%%%%%%%%
% General %
%%%%%%%%%%%

@book{Paun2002,
address = {Berlin, Heidelberg},
author = {P{\u a}un, {\relax Gh}eorghe},
doi = {10.1007/978-3-642-56196-2},
file = {:D$\backslash$:/jarak/Documents/Păun - 2002 - Membrane Computing.pdf:pdf},
isbn = {978-3-540-43601-0},
publisher = {Springer Berlin Heidelberg},
series = {Natural Computing Series},
title = {{Membrane Computing}},
url = {http://link.springer.com/10.1007/978-3-642-56196-2 http://link.springer.com/10.1007/978-3-540-92910-9{\_}40},
year = {2002}
}

@book{Paun2010b,
abstract = {Part of the broader research field of natural computing, Membrane Computing is an area within computing science that aims to abstract computing ideas and models from the structure and functioning of living cells, as well as from the way the cells are organized in tissues or higher order structures. It studies models of computation (known as P systems) inspired by the biochemistry of cells, in particular by the role of membranes in the compartmentalization of living cells into "protected reactors". This handbook provides both a comprehensive survey of available knowledge and established research topics, and a guide to recent developments in the field, covering the subject from theory to applications. The handbook is suitable both for introducing novices to this area of research, and as a main source of reference for active researchers. It sets out the necessary biological and formal background, with the introductory chapter serving as a gentle introduction to and overview of membrane computing. Individual chapters, written by leading researchers in membrane computing, present the state of the art of all main research trends and include extensive bibliographies.},
address = {New York, NY, USA},
author = {P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto},
isbn = {9780199556670},
publisher = {Oxford University Press, Inc.},
title = {{The Oxford Handbook of Membrane Computing}},
year = {2010}
}

@incollection{Henderson2019,
address = {Berlin, Heidelberg},
author = {Henderson, Alec and Nicolescu, Radu},
booktitle = {Handbook of Natural Computing},
doi = {10.1007/978-3-030-12797-8_12},
editor = {Rozenberg, Grzegorz and B{\"{a}}ck, Thomas and Kok, Joost N.},
file = {:D$\backslash$:/jarak/Documents/Henderson, Nicolescu - 2019 - Actor-Like cP Systems.pdf:pdf},
isbn = {978-3-540-92909-3},
keywords = {Actor mod,Distributed algorithms,Synchronous model,actor model,byzantine agreement,cp systems,distributed algorithms,eig trees,inter-cell parallelism,intra-cell parallelism,membrane computing,p systems,prolog terms and unification,synchronous model},
pages = {160--187},
publisher = {Springer Berlin Heidelberg},
title = {{Actor-Like cP Systems}},
url = {http://link.springer.com/10.1007/978-3-030-12797-8{\_}12},
year = {2019}
}

@inbook{Nicolescu2018,
abstract = {We overview the current state of cP systems and illustrate it with a series of old and new examples, intentionally simple, but fundamental in their areas. cP systems -- i.e. P systems with compound terms -- share the fundamental features of traditional cell-like (tree-based) and tissue (graph-based) P systems: unlimited space and computing power, cells, nested cells, multisets, messages, rewriting rules, possibly running in maximal parallel modes. In contrast to traditional P systems, inner nested cells do not have their own rulesets. However, this restriction is usually more than compensated by their significant extensions: compound Prolog-like terms, high-level rules, control on incoming messages. Additionally, the same rulesets can run in either synchronous or asynchronous mode, without any syntactic change. cP systems have been successfully used to model quite a few fundamental and real-life problems, e.g. in NP complexity, data structures, graph theory, distributed algorithms, image processing. As trademark, cP models use fixed sized alphabets and crisp rulesets, independent of the problem size. The samples cover a wide variety of areas, such as arithmetic, list structures, summary statistics and sorting, asynchronous communications, {\$}{\$}$\backslash$mu {\$}{\$}{\$}\mu{\$}-recursive functions.},
address = {Cham},
author = {Nicolescu, Radu and Henderson, Alec},
booktitle = {Enjoying Natural Computing: Essays Dedicated to Mario de Jes{\'{u}}s P{\'{e}}rez-Jim{\'{e}}nez on the Occasion of His 70th Birthday},
doi = {10.1007/978-3-030-00265-7_17},
editor = {Graciani, Carmen and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D$\backslash$:/jarak/Documents//B - 2018 - Enjoying Natural Computing.pdf:pdf},
isbn = {978-3-030-00265-7},
% number = {1},
pages = {204--227},
publisher = {Springer International Publishing},
% series = {Lecture Notes in Computer Science},
title = {{An Introduction to cP Systems}},
url = {https://doi.org/10.1007/978-3-030-00265-7{\_}17},
year = {2018}
}

@article{Zhang2012,
abstract = {? Springer Science+Business Media B.V. 2012.This paper presents a membrane algorithm, called MAQIS, by appropriately combining concepts and principles of membrane computing and quantum-inspired evolutionary approach. MAQIS has four distinct features from the membrane algorithms reported in the literature: initial solutions are only inside the skin membrane; different regions separated by membranes have different components of the algorithm; all the components inside membranes cooperate to produce offspring in a single evolutionary generation; communication rules are performed in a single evolutionary step. Extensive experiments conducted on knapsack problems show that MAQIS outperforms five counterpart approaches and our previous work. The effectiveness of MAQIS is also verified in the application of image processing.},
author = {Zhang, Gexiang and Gheorghe, Marian and Li, Yuquan},
doi = {10.1007/s11047-012-9320-2},
issn = {15729796},
journal = {Natural Computing},
keywords = {Image sparse decomposition,Knapsack problem,Membrane algorithm,Membrane computing,Quantum-inspired evolutionary algorithm},
month = {12},
number = {4},
pages = {701--717},
title = {{A membrane algorithm with quantum-inspired subalgorithms and its application to image processing}},
url = {http://dx.doi.org/10.1007/s11047-012-9320-2},
volume = {11},
year = {2012}
}

@article{Paun2000,
abstract = {A new computability model, of a distributed type, based on the notion of a membrane structure is developed. The structure consists of several cell-like membranes, recurrently placed inside a unique `skin' membrane. A plane representation is a Venn diagram without intersected sets and with a unique superset. In the regions delimited by the membranes there are placed objects. These objects are assumed to evolve. A priority relation between evolution rules are considered. The evolution is done in parallel for all objects able to evolve.},
author = {P{\u a}un, {\relax Gh}eorghe},
doi = {10.1006/jcss.1999.1693},
issn = {00220000},
journal = {Journal of Computer and System Sciences},
month = {8},
number = {1},
pages = {108--143},
title = {{Computing with Membranes}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0022000099916938 https://linkinghub.elsevier.com/retrieve/pii/S0022000099916938},
volume = {61},
year = {2000}
}

@techreport{tPaun98a,
  title = {Computing with Membranes},
  author = {P{\u a}un, {\relax Gh}eorghe},
  number = {TUCS-TR-208},
%   series = {TUCS Technical Reports},
  institution = {Turku Centre for Computer Science},
  year = {1998},
  keywords = {Membrane structure, Super-cell system, Recursively enumerable set, Matrix grammar, Splicing, Natural computing},
  url = {https://tucs.fi/publications/view/?pub_id=tPaun98a},
}

@techreport{tMaPaPaRo01a,
  title = {Tissue P Systems},
  author = {Martín-Vide, Carlos and P{\u a}un, {\relax Gh}eorghe and Pazos, Juan and Rodr{\'{i}}guez-Pat{\'{o}}n, Alfonso},
  number = {TUCS-TR-421},
%   series = {TUCS Technical Reports},
  institution = {Turku Centre for Computer Science},
  year = {2001},
  keywords = {Natural computing, Computing with membranes, Chomsky hierarchy, L systems, Neural networks},
  url = {https://tucs.fi/publications/view/?pub_id=tMaPaPaRo01a},
}

@book{Zhang2017,
address = {Cham},
author = {Zhang, Gexiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J and Gheorghe, Marian},
doi = {10.1007/978-3-319-55989-6},
editor = {Zelinka, Ivan and Adamatzky, Andrew and Chen, Guanrong},
file = {:D$\backslash$:/jarak/Documents/Zhang, P{\'{e}}rez-Jim{\'{e}}nez, Gheorghe - 2017 - Real-life Applications with Membrane Computing.pdf:pdf},
isbn = {978-3-319-55987-2},
publisher = {Springer International Publishing},
series = {Emergence, Complexity and Computation},
title = {{Real-life Applications with Membrane Computing}},
url = {http://www.springer.com/series/10624 http://link.springer.com/10.1007/978-3-319-55989-6},
volume = {25},
year = {2017}
}

@article{Martin-Vide2003,
abstract = {Starting from the way the inter-cellular communication takes place by means of protein channels (and also from the standard knowledge about neuron functioning), we propose a computing model called a tissue P system, which processes symbols in a multiset rewriting sense, in a net of cells. Each cell has a finite state memory, processes multisets of symbol-impulses, and can send impulses ("excitations") to the neighboring cells. Such cell nets are shown to be rather powerful: they can simulate a Turing machine even when using a small number of cells, each of them having a small number of states. Moreover, in the case when each cell works in the maximal manner and it can excite all the cells to which it can send impulses, then one can easily solve the Hamiltonian Path Problem in linear time. A new characterization of the Parikh images of ET0L languages is also obtained in this framework. Besides such basic results, the paper provides a series of suggestions for further research. {\textcopyright} 2002 Elsevier Science B.V. All rights reserved.},
author = {Mart{\'{i}}n-Vide, Carlos and P{\u a}un, {\relax Gh}eorghe and Pazos, Juan and Rodr{\'{i}}guez-Pat{\'{o}}n, Alfonso},
doi = {10.1016/S0304-3975(02)00659-X},
file = {:D$\backslash$:/jarak/Documents/Mart{\'{i}}n-Vide et al. - 2003 - Tissue P systems.pdf:pdf},
issn = {03043975},
journal = {Theoretical Computer Science},
keywords = {Chomsky hierarchy,Lindenmayer hierarchy,Membrane computing,NP-complete problems,Natural computing,P systems},
number = {2},
pages = {295--326},
title = {{Tissue P systems}},
volume = {296},
year = {2003}
}

@article{Sosik2003,
abstract = {We study the computational power of cell division operations in the formal framework of P systems, a mathematical model of cell-like membrane structure with regulated transport of objects (molecules) through membranes. We show that a uniform family of P systems with active membranes and 2-division is able to solve the well-known PSPACE-complete problem QBF in linear time. This result implies that such a family of P systems modelling cell division is at least as powerful as so-called Second Machine Class computers. The Second Machine Class, containing most of the fundamental parallel computer models such as parallel RAM machines of types SIMD and MIMD, vector machines and others, is characterized by using an exponential amount of resources (processing units) with respect to the computing time. {\textcopyright} 2003 Kluwer Publishers.},
author = {Sos{\'{i}}k, Petr},
doi = {10.1023/A:1025401325428},
issn = {15677818},
journal = {Natural Computing},
keywords = {Membrane computing,P system,Second Machine Class},
number = {3},
pages = {287--298},
title = {{The computational power of cell division in P systems: Beating down parallel computers?}},
url = {http://dx.doi.org/10.1023/A:1025401325428},
volume = {2},
year = {2003}
}

@article{Jimenez2003,
abstract = {In this paper we introduce four complexity classes for cellular computing systems with membranes: the first and the second ones contain all decision problems solvable in polynomial time by a family of deterministic P systems, without and with an input membrane, respectively; the third and fourth classes contain all decision problems solvable in polynomial time by a family of non-deterministic P systems, without and with an input membrane, respectively. We illustrate the usefulness of these classes by solving two NP-complete problems, namely HPP and SAT, in both variants of P systems. {\textcopyright} 2003 Kluwer Academic Publishers.},
author = {{P{\'{e}}rez Jim{\'{e}}nez}, Mario J. and {Romero Jim{\'{e}}nez}, {\'{A}}lvaro and {Sancho Caparrini}, Fernando},
doi = {10.1023/A:1025449224520},
issn = {15677818},
journal = {Natural Computing},
keywords = {Complexity classes,Membrane computing,P systems},
month = {9},
number = {3},
pages = {265--285},
title = {{Complexity classes in models of cellular computing with membranes}},
url = {https://doi.org/10.1023/A:1025449224520},
volume = {2},
year = {2003}
}

@article{Paun1999a,
  author  = {P{\u a}un, {\relax Gh}eorghe},
  title   = {{P Systems with Active Membranes: Attacking NP-Complete Problems}},
  journal = {Journal of Automata, Languages and Combinatorics},
  volume  = {6},
  number  = {1},
  pages   = {75--90},
  year    = {2001},
  url     = {https://doi.org/10.25596/jalc-2001-075},
  doi     = {10.25596/jalc-2001-075}
}

@article{Ionescu2006,
abstract = {This paper proposes a way to incorporate the idea of spiking neurons into the area of membrane computing, and to this aim we introduce a class of neural-like P systems which we call spiking neural P systems (in short, SN P systems). In these devices, the time (when the neurons fire and/or spike) plays an essential role. For instance, the result of a computation is the time between the moments when a specified neuron spikes. Seen as number computing devices, SN P systems are shown to be computationally complete (both in the generating and accepting modes, in the latter case also when restricting to deterministic systems). If the number of spikes present in the system is bounded, then the power of SN P systems falls drastically, and we get a characterization of semilinear sets. A series of research topics and open problems are formulated.},
author = {Ionescu, Mihai and P{\u a}un, {\relax Gh}eorghe and Yokomori, Takashi},
file = {:D$\backslash$:/jarak/Documents//Ionescu, Păun, Yokomori - 2006 - Spiking Neural P Systems.pdf:pdf},
issn = {01692968},
journal = {Fundamenta Informaticae},
keywords = {Cells,Computers,Mathematics,Neurons,Science,Spiking neurons,Turing computability,membrane computing,semilinear set},
number = {2/3},
pages = {279--308},
title = {{Spiking Neural P Systems}},
volume = {71},
year = {2006}
}

@article{Cooper2019,
author = {Cooper, James and Nicolescu, Radu},
doi = {10.3233/FI-2019-1760},
editor = {Pan, Linqiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Zhang, Gexiang},
issn = {01692968},
journal = {Fundamenta Informaticae},
month = {1},
number = {2-3},
pages = {157--180},
title = {{The Hamiltonian Cycle and Travelling Salesman Problems in cP Systems}},
url = {https://www.medra.org/servlet/aliasResolver?alias=iospress{\&}doi=10.3233/FI-2019-1760},
volume = {164},
year = {2019}
}

@article{Cooper2019a,
author = {Cooper, James and Nicolescu, Radu},
doi = {10.1007/s41965-019-00013-2},
file = {:D$\backslash$:/Users/jcoo092/Writing/2019/G-Col JMC/Cooper-Nicolescu2019{\_}Article{\_}AlternativeRepresentationsOfPS.pdf:pdf},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Concurrent ML,Graph colouring problem,Simple kernel P systems,cP systems,concurrent ml,cp systems,graph colouring problem,simple kernel p systems},
month = {6},
number = {2},
pages = {112--126},
title = {{Alternative representations of P systems solutions to the graph colouring problem}},
url = {https://doi.org/10.1007/s41965-019-00013-2 http://link.springer.com/10.1007/s41965-019-00013-2},
volume = {1},
year = {2019}
}

@incollection{Nicolescu2014a,
abstract = {We develop and formalise our earlier complex objects proposal and show that it enables an efficient high-level programming of P systems. {\textcopyright} 2014 Springer-Verlag Berlin Heidelberg.},
address = {Berlin, Heidelberg},
author = {Nicolescu, Radu and Ipate, Florentin and Wu, Huiling},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-54239-8_20},
editor = {Alhazov, Artiom and Cojocaru, Svetlana and Gheorghe, Marian and Rogozhin, Yurii and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nicolescu, Ipate, Wu - 2014 - Programming P Systems with Complex Objects.pdf:pdf},
isbn = {9783642542381},
keywords = {NP-complete,P systems,applications,complex objects,control flow,data structures,function calls,generic rules,numerical P systems,parallel composition,recursion},
% number = {i},
pages = {280--300},
publisher = {Springer Berlin Heidelberg},
title = {{Programming P Systems with Complex Objects}},
url = {http://link.springer.com/10.1007/978-3-642-54239-8{\_}20},
volume = {8340},
year = {2014}
}

@incollection{Nicolescu2017,
abstract = {We refine our earlier version of P systems with complex symbols. The new version, called cP systems, enables the creation and manipulation of high-level data structures which are typical in high-level languages, such as: relations (graphs), associative arrays, lists, trees. We assess these capabilities by attempting a revised version of our previously best solution for the Byzantine agreement problem – a famous problem in distributed algorithms, with non-trivial data structures and algorithms. In contrast to our previous solutions, which use a greater than exponential number of symbols and rules, the new solution uses a fixed sized alphabet and ruleset, independent of the problem size. The new ruleset follows closely the conceptual description of the algorithm. This revised framework opens the way to further extensions, which may bring P systems closer to the conceptual Actor model.},
author = {Nicolescu, Radu},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-54072-6_20},
editor = {Leporati, Alberto and Rozenberg, Grzegorz and Salomaa, Arto and Claudio, Zandron},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nicolescu - 2017 - Revising the Membrane Computing Model for Byzantine Agreement.pdf:pdf},
isbn = {9783319540719},
keywords = {Actor model,Byzantine agreement,Cells with subcells,Complex symbols,Distributed algorithms,EIG trees,Generic rules,Inter-cell parallelism,Intra-cell parallelism,Membrane computing,P systems,Prolog terms and unification,Synchronous and asynchronous models,cP systems},
pages = {317--339},
title = {{Revising the Membrane Computing Model for Byzantine Agreement}},
url = {http://link.springer.com/10.1007/978-3-319-54072-6{\_}20},
volume = {10105},
year = {2017}
}

@article{Cooper2022,
author = {Cooper, James and Nicolescu, Radu},
doi = {10.1007/s41965-022-00097-3},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
pubstate = {Accepted},
title = {{Neighbourhood Message Passing on a Lattice with cP systems}},
year = {2022},
}

@inproceedings{Cooper2021a,
author = {Cooper, James and Nicolescu, Radu},
booktitle = {International Conference on Membrane Computing},
note = {Extended Abstract},
subtitle = {Applied to Median Filtering},
title = {Revisiting Sorting and Selection},
year = {2021},
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Image Processing & Computer Vision %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@article{Diaz-Pernil2019,
author = {D{\'{i}}az-Pernil, Daniel and Guti{\'{e}}rrez-Naranjo, Miguel A. and Peng, Hong},
doi = {10.1007/s41965-018-00002-x},
file = {:D$\backslash$:/jarak/Documents/D{\'{i}}az-Pernil, Guti{\'{e}}rrez-Naranjo, Peng - 2019 - Membrane computing and image processing a short survey.pdf:pdf},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Image processing,Membrane computing,P systems,image processing,membrane computing,p systems},
month = {3},
number = {1},
pages = {58--73},
title = {{Membrane computing and image processing: a short survey}},
url = {http://link.springer.com/10.1007/s41965-018-00002-x},
volume = {1},
year = {2019}
}

@inproceedings{Nicolescu2015,
author={Radu Nicolescu},
editor={Rozenberg, Grzegorz and Salomaa, Arto and Sempere, José M. and Zandron, Claudio},
year={2015},
title = {{Structured Grid Algorithms Modelled with Complex Objects}},
booktitle={Membrane Computing: 16th International Conference, CMC 2015, Valencia, Spain, August 17-21, 2015, Revised Selected Papers},
publisher={Springer International Publishing},
address={Cham},
pages={321-337},
isbn={978-3-319-28475-0},
doi={10.1007/978-3-319-28475-0_22}
}

% @incollection{Nicolescu2015a,
% author = {Nicolescu, Radu},
% booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
% editor = {Rozenberg G. and Salomaa A. and Sempere J. and Zandron C.},
% doi = {10.1007/978-3-319-28475-0_22},
% file = {:D$\backslash$:/jarak/Documents/Nicolescu - 2015 - Structured Grid Algorithms Modelled with Complex Objects.pdf:pdf},
% isbn = {9783319284743},
% keywords = {complex objects,els,generic rules,image processing,inter-cell parallelism,intra-cell parallelism,membrane computing,p systems,parallel and concurrent mod-,prolog terms,seeded region growing,synchronous and asynchronous models,termination detection},
% pages = {321--337},
% title = {{Structured Grid Algorithms Modelled with Complex Objects}},
% url = {http://link.springer.com/10.1007/978-3-319-28475-0{\_}22},
% volume = {9504},
% year = {2015}
% }

@article{GimelFarb2013a,
abstract = {Designing parallel versions of sequential algorithms has attracted renewed attention, due to recent hardware advances, including various general-purpose multi-core and many-core processors, as well as special-purpose FPGA implementations. P systems consist of networks of autonomous cells, such that each cell transforms its input signals in accord with its symbol-rewriting rules and feeds the output results into its immediate neighbours. Inherent massive intra- and inter-cell parallelisms make P systems a prospective theoretical testbed for designing efficient parallel and parallel-sequential algorithms. This paper discusses the capabilities of P systems to implement the symmetric dynamic programming stereo (SDPS) matching algorithm, which explicitly accounts for binocular or monocular visibility of 3D surface points. Given enough cells, the P system implementation speeds up the inner algorithm loop from O(nd) to O(n+d), where n is the width of a stereo image and d is the disparity range. The implementation gives also an insight into a more general SDPS that accounts for a possible multiplicity of solutions of the ill-posed problem of optimal stereo matching.},
author = {Gimel'farb, Georgy L. and Nicolescu, Radu and Ragavan, Sharvin},
doi = {10.1007/s10851-012-0367-6},
file = {:D$\backslash$:/jarak/Documents//Gimel'farb, Nicolescu, Ragavan - 2013 - P system implementation of dynamic programming stereo.pdf:pdf},
issn = {09249907},
journal = {Journal of Mathematical Imaging and Vision},
keywords = {Membrane computing,Parallel systems,Stereo matching,Symmetric dynamic programming stereo (SDPS)},
month = {9},
number = {1-2},
pages = {13--26},
title = {{P system implementation of dynamic programming stereo}},
volume = {47},
year = {2013}
}

@inproceedings{Gimelfarb2011,
abstract = {Designing parallel versions of sequential algorithms has attracted renewed attention, due to recent hardware advances, including various general-purpose multi-core, multiple core and many-core processors, as well as special-purpose FPGA implementations. P systems consist of networks of autonomous cells, such that each cell transforms its input signals in accord with symbol-rewriting rules and feeds the output results into its immediate neighbours. Inherent intra- and inter-cell parallelism make the P systems a prospective theoretical testbed for designing parallel algorithms. This paper discusses capabilities of P systems to implement the symmetric dynamic programming algorithm for stereo matching, with due account to binocular or monocular visibility of 3D surface points. {\textcopyright} 2011 Springer-Verlag.},
address = {Berlin, Heidelberg},
author = {Gimel'farb, Georgy L. and Nicolescu, Radu and Ragavan, Sharvin},
booktitle = {Computer Analysis of Images and Patterns},
doi = {10.1007/978-3-642-23678-5_33},
editor = {Real, Pedro and Diaz-Pernil, Daniel and Molina-Abril, Helena and Berciano, Ainhoa and Kropatsch, Walter},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Gimel'farb, Nicolescu, Ragavan - 2011 - P systems in stereo matching.pdf:pdf},
isbn = {978-3-642-23678-5},
keywords = {Parallel systems,membrane computing,stereo matching,symmetric dynamic programming stereo (SDPS)},
month = {7},
% number = {PART 2},
pages = {285--292},
publisher = {Springer Berlin Heidelberg},
title = {{P Systems in Stereo Matching}},
url = {http://link.springer.com/10.1007/978-3-642-23678-5{\_}33},
% volume = {6855 LNCS},
year = {2011}
}


@article{Diaz-Pernil2013,
abstract = {In this paper, we present a parallel implementation of a new algorithm for segmenting images with gradient-based edge detection by using techniques from Natural Computing. This bio-inspired parallel algorithm has been implemented in a novel device architecture called CUDA™(Compute Unified Device Architecture). The implementation has been designed via tissue P systems on the framework of Membrane Computing. Some examples and experimental results are also presented.},
author = {D{\'{i}}az-Pernil, Daniel and Berciano, Ainhoa and Pe{\~{n}}a-Cantillana, Francisco and Guti{\'{e}}rrez-Naranjo, Miguel A.},
journal = {Pattern Recognition Letters},
doi = {10.1016/j.patrec.2012.10.014},
issn = {01678655},
number = {8},
pages = {846--855},
title = {{Segmenting images with gradient-based edge detection using Membrane Computing}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0167865512003443},
volume = {34},
year = {2013}
}

@article{Diaz-Pernil2013a,
abstract = {Skeletonization is a common type of transformation within image analysis. In general, the image B is a skeleton of the black and white image A, if the image B is made of fewer black pixels than the image A, it does preserve its topological properties and, in some sense, keeps its meaning. In this paper, we aim to use spiking neural P systems (a computational model in the framework of membrane computing) to solve the skeletonization problem. Based on such devices, a parallel software has been implemented within the Graphics Processors Units (GPU) architecture. Some of the possible real-world applications and new lines for future research will be also dealt with in this paper. {\textcopyright} 2013 Elsevier B.V.},
author = {D{\'{i}}az-Pernil, Daniel and Pe{\~{n}}a-Cantillana, Francisco and Guti{\'{e}}rrez-Naranjo, Miguel A.},
doi = {10.1016/j.neucom.2012.12.032},
issn = {09252312},
journal = {Neurocomputing},
keywords = {Guo and Hall algorithm,Membrane computing,Skeletonizing,Spiking neural P systems},
month = {9},
pages = {81--91},
title = {{A parallel algorithm for skeletonizing images by using spiking neural P systems}},
volume = {115},
year = {2013}
}

@article{Christinal2011,
abstract = {Membrane Computing is a biologically inspired computational model. Its devices are called P systems and they perform computations by applying a finite set of rules in a synchronous, maximally parallel way. In this paper, we develop a variant of P-system, called tissue-like P system in order to design in this computational setting, a region-based segmentation algorithm of 2D pixel-based and 3D voxel-based digital images. Concretely, we use 4-adjacency neighborhood relation between pixels in 2D and 6-adjacency neighborhood relation between voxel in 3D for segmenting digital images in a constant number of steps. Finally, specific software is used to check the validity of these systems with some simple examples. {\textcopyright} 2011 Elsevier B.V. All rights reserved.},
author = {Christinal, A. Hepzibah and D{\'{i}}az-Pernil, Daniel and Real, Pedro},
doi = {10.1016/j.patrec.2011.05.004},
file = {:D$\backslash$:/jarak/Documents/Christinal, D{\'{i}}az-Pernil, Real - 2011 - Region-based segmentation of 2D and 3D images with tissue-like P systems.pdf:pdf},
issn = {01678655},
journal = {Pattern Recognition Letters},
keywords = {Digital image,Digital topology,Membrane Computing,P systems,Region-based segmentation},
month = {12},
number = {16},
pages = {2206--2212},
title = {{Region-based segmentation of 2D and 3D images with tissue-like P systems}},
url = {http://dx.doi.org/10.1016/j.patrec.2011.05.004 http://linkinghub.elsevier.com/retrieve/pii/S0167865511001395},
volume = {32},
year = {2011}
}

@article{Diaz-Pernil2016,
abstract = {This paper presents a fully automatic parallel software for the localization of the optic disc (OD) in retinal fundus color images. A new method has been implemented with the Graphics Processing Units (GPU) technology. Image edges are extracted using a new operator, called AGP-color segmentator. The resulting image is binarized with Hamadani's technique and, finally, a new algorithm called Hough circle cloud is applied for the detection of the OD. The reliability of the tool has been tested with 129 images from the public databases DRIVE and DIARETDB1 obtaining an average accuracy of 99.6{\%} and a mean consumed time per image of 7.6 and 16.3 s respectively. A comparison with several state-of-the-art algorithms shows that our algorithm represents a significant improvement in terms of accuracy and efficiency.},
author = {D{\'{i}}az-Pernil, Daniel and Fond{\'{o}}n, Irene and Pe{\~{n}}a-Cantillana, Francisco and Guti{\'{e}}rrez-Naranjo, Miguel A.},
journal = {Pattern Recognition Letters},
doi = {10.1016/j.patrec.2016.04.025},
issn = {01678655},
keywords = {GPU,Hough transform,Optic disc,Parallel image processing},
pages = {99--107},
title = {{Fully automatized parallel segmentation of the optic disc in retinal fundus images}},
url = {http://www.sciencedirect.com.ezproxy.auckland.ac.nz/science/article/pii/S0167865516300794},
volume = {83},
year = {2016}
}

@article{Nicolescu2014b,
abstract = {We propose a novel approach to justify and guide regularisation of an ill-posed one-dimensional global optimisation with multiple solutions using a massively parallel (P system) model of the solution space. Classical optimisation assumes a well-posed problem with a stable unique solution. Most of important practical problems are ill posed due to an unstable or non-unique global optimum and are regularised to get a unique best-suited solution. Whilst regularisation theory exists largely for unstable unique solutions, its recommendations are often routinely applied to inverse optical problems with essentially non-unique solutions, e.g. computer stereo vision or image segmentation, typically formulated in terms of global energy minimisation. In these cases the recommended regularisation becomes purely heuristic and does not guarantee a unique solution. As a result, classical optimisation algorithms: dynamic programming (DP) and belief propagation (BP) - meet with difficulties. Our recent concurrent propagation (CP), leaning upon the P systems paradigm, extends DP and BP to always detect whether the problem is ill posed or not and store in the ill-posed case an entire space of solutions that yield the same global optimum. This suggests a radically new path to proper regularisation: select the best-suited unique solution by exploring statistical and structural features of this space. We propose a P systems based implementation of CP and set out as a case study an application of CP to the image matching problem in stereo vision.},
author = {Nicolescu, Radu and Gimel'farb, Georgy L. and Delmas, Patrice and Gong, Rui},
doi = {10.3233/FI-2014-1026},
file = {:D$\backslash$:/jarak/Documents/Nicolescu et al. - 2014 - Regularising ill-posed discrete optimisation Quests with P systems.pdf:pdf},
issn = {01692968},
journal = {Fundamenta Informaticae},
keywords = {Actor model,Concurrent propagation,Ill-posed problems,Membrane computing,Multiple solutions,P systems,Parallel and distributed computing models,Regularisation,Stereo matching},
number = {3-4},
pages = {465--483},
title = {{Regularising ill-posed discrete optimisation: Quests with P systems}},
url = {http://ezproxy.auckland.ac.nz/login?url=http://search.ebscohost.com/login.aspx?direct=true{\&}db=iih{\&}AN=95064509{\&}site=ehost-live{\&}scope=site},
volume = {131},
year = {2014}
}

@incollection{Nicolescu2014,
abstract = {Based on our earlier complex objects proposal, we present three novel concurrent membrane computing models for a fundamental image processing task: the thinning (or skeletonisation) of binary images, based on the classical Guo-Hall algorithm (A2). The first model is synchronous and uses one cell per pixel and relies on inter-cell parallelism; the second model is an asynchronous version of the first; the third model uses one single cell, with one sub-cellular object per pixel, and relies on intra-cell parallelism. The static and dynamic qualities of our models validate our complex objects proposal: (i) the proposed models are crisp (comparable to the best pseudocode); and (ii) complex objects concurrency and messaging can be efficiently emulated on a message-based Actors framework (which opens a novel research path).},
address = {Cham},
author = {Nicolescu, Radu},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-14370-5_21},
editor = {Gheorghe, Marian and Rozenberg, Grzegorz and Salomaa, Arto and Sos{\'{i}}k, Petr and Zandron, Claudio},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nicolescu - 2014 - Parallel Thinning with Complex Objects and Actors(2).pdf:pdf},
isbn = {9783319143705},
keywords = {Actor model,Complex objects,Generic rules,Guo-Hall algorithm,Image processing,Inter-cell parallelism,Intra-cell parallelism,Membrane computing,Message-based,P systems,Parallel and concurrent models,Prolog terms,Synchronous and asynchronous models,Termination detection},
pages = {330--354},
publisher = {Springer International Publishing},
title = {{Parallel Thinning with Complex Objects and Actors}},
url = {http://dx.doi.org/10.1007/978-3-319-14370-5{\_}21 http://link.springer.com/10.1007/978-3-319-14370-5{\_}21},
volume = {8961},
year = {2014}
}

%%%%%%%
% GPU %
%%%%%%%
@article{Cecilia2010a,
abstract = {P systems or Membrane Systems provide a high-level computational modelling framework that combines the structure and dynamic aspects of biological systems in a relevant and understandable way. They are inherently parallel and non-deterministic computing devices. In this article, we discuss the motivation, design principles and key of the implementation of a simulator for the class of recognizer P systems with active membranes running on a (GPU).We compare our parallel simulator for GPUs to the simulator developed for a single central processing unit (CPU), showing that GPUs are better suited than CPUs to simulate P systems due to their highly parallel nature. {\textcopyright} The Author 2009. Published by Oxford University Press.},
author = {Cecilia, Jos{\'{e}} M. and García, J. M. and Guerrero, Gin{\'{e}}s D. and Mart{\'{i}}nez-del-Amor, M. Á. and P{\'{e}}rez-Hurtado, I. and Pérez-Jiménez, M. J.},
doi = {10.1093/bib/bbp064},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cecilia et al. - 2009 - Simulation of P systems with active membranes on CUDA.pdf:pdf},
issn = {1467-5463},
journal = {Briefings in Bioinformatics},
keywords = {CUDA,GPU,Membrane computing,Natural computing,P Systems,Parallel computing},
month = {5},
number = {3},
pages = {313--322},
title = {{Simulation of P systems with active membranes on CUDA}},
url = {https://academic.oup.com/bib/article-lookup/doi/10.1093/bib/bbp064},
volume = {11},
year = {2010}
}

@article{Cecilia2010,
abstract = {P systems are inherently parallel and non-deterministic theoretical computing devices defined inside the field of Membrane Computing. Many P system simulators have been presented in this area, but they are inefficient since they cannot handle the parallelism of these devices. Nowadays, we are witnessing the consolidation of the GPUs as a parallel framework to compute general purpose applications. In this paper, we analyse GPUs as an alternative parallel architecture to improve the performance in the simulation of P systems, and we illustrate it by using the case study of a family of P systems that provides an efficient and uniform solution to the SAT problem. Firstly, we develop a simulator that fully simulates the computation of the P system, demonstrating that GPUs are well suited to simulate them. Then, we adapt this simulator to the GPU architecture idiosyncrasies, improving the performance of the previous simulator. {\textcopyright} 2010 Elsevier Inc. All rights reserved.},
author = {Cecilia, Jos{\'{e}} M. and Garc{\'{i}}a, Jos{\'{e}} M. and Guerrero, Gin{\'{e}}s D. and Mart{\'{i}}nez-del-Amor, Miguel Á. and P{\'{e}}rez-Hurtado, Ignacio and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.1016/j.jlap.2010.03.008},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cecilia et al. - 2010 - The Journal of Logic and Algebraic Programming Simulating a P system based efficient solution to SAT by using GP.pdf:pdf},
issn = {15678326},
journal = {Journal of Logic and Algebraic Programming},
keywords = {GPUs,Membrane Computing,P systems,SAT},
month = {8},
number = {6},
pages = {317--325},
title = {{Simulating a P system based efficient solution to SAT by using GPUs}},
url = {http://dx.doi.org/10.1016/j.jlap.2010.03.008 https://linkinghub.elsevier.com/retrieve/pii/S1567832610000123},
volume = {79},
year = {2010}
}

@article{Cecilia2013,
abstract = {We present GPU implementations of two different nature-inspired optimization methods for well-known optimization problems. Ant Colony Optimization (ACO) is a two-stage population-based method modelled on the foraging behaviour of ants, while P systems provide a high-level computational modelling framework that combines the structure and dynamic aspects of biological systems (in particular, their parallel and non-deterministic nature). Our methods focus on exploiting data parallelism and memory hierarchy to obtain GPU factor gains surpassing 20x for any of the two stages of the ACO algorithm, and 16x for P systems when compared to sequential versions running on a single-threaded high-end CPU. Additionally, we compare performance between GPU generations to validate hardware enhancements introduced by Nvidia's Fermi architecture. {\textcopyright} 2012 Springer Science+Business Media, LLC.},
author = {Cecilia, Jos{\'{e}} M. and Nisbet, Andy and Amos, Martyn and Garc{\'{i}}a, Jos{\'{e}} M. and Ujald{\'{o}}n, Manuel},
doi = {10.1007/s11227-012-0770-1},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cecilia et al. - 2013 - Enhancing GPU parallelism in nature-inspired algorithms.pdf:pdf},
issn = {09208542},
journal = {Journal of Supercomputing},
keywords = {ACO,Bioinspired methods,GPUs,HPC,P systems},
month = {3},
number = {3},
pages = {773--789},
title = {{Enhancing GPU parallelism in nature-inspired algorithms}},
url = {http://dx.doi.org/10.1007/s11227-012-0770-1 http://link.springer.com/10.1007/s11227-012-0770-1},
volume = {63},
year = {2013}
}

@incollection{Macias-Ramos2015,
abstract = {Fuzzy Reasoning Spiking Neural P systems (FRSN P systems, for short) is a variant of Spiking Neural P systems incorporating fuzzy logic elements that make it suitable to model fuzzy diagnosis knowledge and reasoning required for fault diagnosis applications. In this sense, several FRSN P system variants have been proposed, dealing with real numbers, trapezoidal numbers, weights, etc. The model incorporating real numbers was the first introduced [13], presenting promising applications in the field of fault diagnosis of electrical systems. For this variant, a matrix-based algorithm was provided which, when executed on parallel computing platforms, fully exploits the model maximally parallel capacities. In this paper we introduce a P-Lingua framework extension to parse and simulate FRSN P systems with real numbers. Two simulators, implementing a variant of the original matrix-based simulation algorithm, are provided: a sequential one (written in Java), intended to run on traditional CPUs, and a parallel one, intended to run on CUDAenabled devices.},
address = {Cham},
author = {Mac{\'{i}}as-Ramos, Luis F. and Mart{\'{i}}nez-del-Amor, Miguel Á. and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-28475-0_18},
editor = {Rozenberg, Grzegorz and Salomaa, Arto and Sempere, Jos{\'{e}} M and Zandron, Claudio},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mac{\'{i}}as-Ramos, Mart{\'{i}}nez-del-Amor, P{\'{e}}rez-Jim{\'{e}}nez - 2015 - Simulating FRSN P Systems with Real Numbers in P-Lingua on sequential and CUDA p.pdf:pdf},
isbn = {9783319284743},
keywords = {CUDA,Fault diagnosis,Fuzzy Reasoning Spiking Neural P systems,Fuzzy knowledge,Fuzzy reasoning,Java,Membrane Computing,P systems,P-Lingua,Spiking Neural P systems},
pages = {262--276},
publisher = {Springer International Publishing},
title = {{Simulating FRSN P Systems with Real Numbers in P-Lingua on sequential and CUDA platforms}},
url = {http://link.springer.com/10.1007/978-3-319-28475-0{\_}18 http://dx.doi.org/10.1007/978-3-319-28475-0{\_}18},
volume = {9504},
year = {2015}
}

@article{Maroosi2014,
abstract = {In previous studies, objects of each membrane were assigned to threads of one thread block of the graphic processing unit (GPU). The number of active threads was low if the number of objects inside a membrane was low. This study represents objects of membranes as entities of a matrix. Then a sub-matrix represents the appropriate number of objects assigned to threads of each thread block to balance the load and keep the occupancy high even when the number of objects per membrane is low. The size of the sub-matrix or the appropriate number of active threads is determined automatically. Furthermore, by this approach it is possible to assign more than one membrane to each thread block and to execute communication between membranes in the same thread block without the need for time-consuming inter-block communication. For example, using the previous algorithm, for two objects per membrane the speed up is 0.6×, while for the proposed algorithm the speed up is 32.4×.},
author = {Maroosi, Ali and Muniyandi, Ravie Chandren},
doi = {10.1016/j.jocs.2014.07.003},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Maroosi, Muniyandi - 2014 - Enhancement of membrane computing model implementation on GPU by introducing matrix representation for balan.pdf:pdf},
issn = {18777503},
journal = {Journal of Computational Science},
keywords = {Graphics processing unit,Membrane computing,P systems,Parallel processing},
month = {11},
number = {6},
pages = {861--871},
title = {{Enhancement of membrane computing model implementation on GPU by introducing matrix representation for balancing occupancy and reducing inter-block communications}},
url = {http://www.sciencedirect.com.ezproxy.auckland.ac.nz/science/article/pii/S1877750314000994 https://linkinghub.elsevier.com/retrieve/pii/S1877750314000994},
volume = {5},
year = {2014}
}

@article{Maroosi2014a,
abstract = {Membrane systems are parallel distributed computing models that are used in a wide variety of areas. Use of a sequential machine to simulate membrane systems loses the advantage of parallelism in Membrane Computing. In this paper, an innovative classification algorithm based on a weighted network is introduced. Two new algorithms have been proposed for simulating membrane systems models on a Graphics Processing Unit (GPU). Communication and synchronization between threads and thread blocks in a GPU are time-consuming processes. In previous studies, dependent objects were assigned to different threads. This increases the need for communication between threads, and as a result, performance decreases. In previous studies, dependent membranes have also been assigned to different thread blocks, requiring inter-block communications and decreasing performance. The speedup of the proposed algorithm on a GPU that classifies dependent objects using a sequential approach, for example with 512 objects per membrane, was 82×, while for the previous approach (Algorithm 1), it was 8.2×. For a membrane system with high dependency among membranes, the speedup of the second proposed algorithm (Algorithm 3) was 12×, while for the previous approach (Algorithm 1) and the first proposed algorithm (Algorithm 2) that assign each membrane to one thread block, it was 1.8×. {\textcopyright} 2014 Elsevier B.V. All rights reserved.},
author = {Maroosi, Ali and Muniyandi, Ravie Chandren and Sundararajan, Elankovan and Zin, Abdullah Mohd},
doi = {10.1016/j.simpat.2014.05.005},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Maroosi et al. - 2014 - Parallel and distributed computing models on a graphics processing unit to accelerate simulation of membrane sys.pdf:pdf},
issn = {1569190X},
journal = {Simulation Modelling Practice and Theory},
keywords = {Distributed computing,Graphics processing unit,Membrane Computing,Membrane systems,Parallel processing,Weighted network},
month = {9},
pages = {60--78},
title = {{Parallel and distributed computing models on a graphics processing unit to accelerate simulation of membrane systems}},
url = {http://dx.doi.org/10.1016/j.simpat.2014.05.005 http://www.sciencedirect.com.ezproxy.auckland.ac.nz/science/article/pii/S1569190X14000756 https://linkinghub.elsevier.com/retrieve/pii/S1569190X14000756},
volume = {47},
year = {2014}
}

@article{Martinez-Del-Amor2015,
abstract = {P systems have been proven to be useful as modeling tools in many fields, such as Systems Biology and Ecological Modeling. For such applications, the acceleration of P system simulation is often desired, given the computational needs derived from these kinds of models. One promising solution is to implement the inherent parallelism of P systems on platforms with parallel architectures. In this respect, GPU computing proved to be an alternative to more classic approaches in Parallel Computing. It provides a low cost, and a manycore platform with a high level of parallelism. The GPU has been already employed to speedup the simulation of P systems. In this paper, we look over the available parallel P systems simulators on the GPU, with special emphasis on those included in the PMCGPU project, and analyze some useful guidelines for future implementations and developments.},
author = {Mart{\'{i}}nez-del-Amor, Miguel Á. and Garc{\'{i}}a-Quismondo, Manuel and Mac{\'{i}}as-Ramos, Luis F. and Valencia-Cabrera, Luis and Riscos-N{\'{u}}{\~{n}}ez, Agustin and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.3233/FI-2015-1157},
issn = {01692968},
journal = {Fundamenta Informaticae},
keywords = {CUDA,GPU computing,Membrane Computing,P systems,Parallel Computing},
number = {3},
pages = {269--284},
title = {{Simulating P Systems on GPU Devices: A Survey}},
url = {http://ezproxy.auckland.ac.nz/login?url=http://search.ebscohost.com/login.aspx?direct=true{\&}db=iih{\&}AN=100848783{\&}site=ehost-live{\&}scope=site https://www.medra.org/servlet/aliasResolver?alias=iospress{\&}doi=10.3233/FI-2015-1157},
volume = {136},
year = {2015}
}

@article{Martinez-Del-Amor2013a,
abstract = {In order to provide efficient software tools to handle large membrane systems, high-throughput simulators are required. Parallel computing platforms are good candidates, since they are capable of partially implementing the inherently parallel nature of the model. In this concern, today GPUs (Graphics Processing Unit) are considered as highly parallel processors, and they have been successfully used to accelerate P system simulators. A new GPU simulator for a quadratic-time solution to SAT by means of tissue P systems with cell division is presented in this paper. This simulator is compared with a previously introduced GPU-based simulator for a linear-time solution to SAT based on P systems with active membranes. The aim of this paper is to further study which ingredients of different P systems models are well suited to be managed by the GPU.},
author = {Mart{\'{i}}nez-del-Amor, Miguel Á. and P{\'{e}}rez-Carrasco, Jes{\'{u}}s and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
file = {:D$\backslash$:/Users/jcoo092/Writing/2018/ACMC18/Reference papers/Mart{\'{i}}nez-del-Amor, P{\'{e}}rez-Carrasco, Ṕerez-Jim{\'{e}}nez - Characterizing the parallel simulation of P systems on the GPU - 2013.pdf:pdf},
issn = {15487199},
journal = {International Journal of Unconventional Computing},
keywords = {GPGPU,Membrane computing,SAT,Tissue p systems},
number = {5-6 SPEC. ISSUE},
pages = {405--424},
title = {{Characterizing the parallel simulation of P systems on the GPU}},
volume = {9},
year = {2013}
}

@book{Hennessy2012,
abstract = {"Computer Architecture: A Quantitative Approach explores the ways that software and technology in the cloud are accessed by digital media, such as cell phones, computers, tablets, and other mobile devices. The book became a part of Intel"s 2012 recommended reading list for developers, and it covers the revolution of mobile computing. The text also highlights the two most important factors in architecture today: parallelism and memory hierarchy. The six chapters that this book is composed of follow a consistent framework: explanation of the ideas in each chapter; a ""crosscutting issues"" section, which presents how the concepts covered in one chapter connect with those given in other chapters; a ""putting it all together"" section that links these concepts by discussing how they are applied in real machine; and detailed examples of misunderstandings and architectural traps commonly encountered by developers and architects. The first chapter of the book includes formulas for energy, static and dynamic power, integrated circuit costs, reliability, and availability. Chapter 2 discusses memory hierarchy and includes discussions about virtual machines, SRAM and DRAM technologies, and new material on Flash memory. The third chapter covers the exploitation of instruction-level parallelism in high-performance processors, superscalar execution, dynamic scheduling and multithreading, followed by an introduction to vector architectures in the fourth chapter. Chapters 5 and 6 describe multicore processors and warehouse-scale computers (WSCs), respectively."},
address = {Waltham, Mass.},
author = {Hennessy, John L. and Patterson, David A.},
edition = {5th Ed.},
isbn = {978-0-12-383872-8},
keywords = {Computer architecture},
publisher = {Morgan Kaufmann/Elsevier},
title = {{Computer Architecture - A Quantitative Approach}},
year = {2012}
}

@book{Rauber2010,
abstract = {Innovations in hardware architecture, like hyper-threading or multicore processors, mean that parallel computing resources are available for inexpensive desktop computers. In only a few years, many standard software products will be based on concepts of parallel programming implemented on such hardware, and the range of applications will be much broader than that of scientific computing, up to now the main application area for parallel computing. Rauber and R{\"{u}}nger take up these recent developments in processor architecture by giving detailed descriptions of parallel programming techniques that are necessary for developing efficient programs for multicore processors as well as for parallel cluster systems and supercomputers. Their book is structured in three main parts, covering all areas of parallel computing: the architecture of parallel systems, parallel programming models and environments, and the implementation of efficient application algorithms. The emphasis lies on parallel programming techniques needed for different architectures. The main goal of the book is to present parallel programming techniques that can be used in many situations for many application areas and which enable the reader to develop correct and efficient parallel programs. Many examples and exercises are provided to show how to apply the techniques. The book can be used as both a textbook for students and a reference book for professionals. The presented material has been used for courses in parallel programming at different universities for many years. {\textcopyright} Springer-Verlag Berlin Heidelberg 2010. All rights are reserved.},
address = {Berlin, Heidelberg},
author = {Rauber, Thomas and R{\"{u}}nger, Gudula},
booktitle = {Parallel Programming: For Multicore and Cluster Systems},
doi = {10.1007/978-3-642-04818-0},
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Rauber, R{\"{u}}nger - 2010 - Parallel programming For multicore and cluster systems.pdf:pdf},
isbn = {9783642048173},
issn = {1097024X},
keywords = {Operating systems,PASCAL,Simulation,Synchronization},
pages = {1--455},
publisher = {Springer Berlin Heidelberg},
title = {{Parallel programming: For multicore and cluster systems}},
url = {http://link.springer.com/10.1007/978-3-642-04818-0},
year = {2010}
}

@article{Henderson2020,
abstract = {There have been a few NP-hard problems solved using cP systems including the travelling salesman problem. However, these problems are typically in NP rather than higher in the polynomial time hierarchy. In this paper, we solve QSAT (also known as TQBF), which is a well-known PSPACE-complete problem. Compared to other extant confluent P systems solutions, our deterministic cP solution only uses a small constant number of custom alphabet symbols (19), a small constant number of rules (10) and a small constant upper limit of membrane nesting depth (6), independent of the problem size.},
author = {Henderson, Alec and Nicolescu, Radu and Dinneen, Michael J},
doi = {10.1007/s41965-020-00064-w},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
month = {12},
number = {4},
pages = {311--322},
title = {{Solving a PSPACE-complete problem with cP systems}},
url = {https://doi.org/10.1007/s41965-020-00064-w http://link.springer.com/10.1007/s41965-020-00064-w},
volume = {2},
year = {2020}
}

@article{Paun2001,
abstract = {The aim of this paper is to introduce to the reader the main ideas of computing with membranes, a recent branch of (theoretical) molecular computing. In short, in a cell-like system, multisets of objects evolve according to given rules in the compartments defined by a membrane structure and compute natural numbers as the result of halting sequences of transitions. The model is parallel, nondeterministic. Many variants have already been considered and many problems about them were investigated. We present here some of these variants, focusing on two central classes of results: (1) characterizations of the recursively enumerable sets of numbers and (2) possibilities to solve NP-complete problems in polynomial - even linear - time (of course, by making use of an exponential space). The results are given without proofs. An almost complete bibliography of the domain, at the middle of October 2000, is also provided. Copyright {\textcopyright} 2001 Elsevier Science Ireland Ltd.},
author = {P{\u a}un, {\relax Gh}eorghe},
doi = {10.1016/S0303-2647(00)00143-X},
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Păun - 2001 - From cells to computers computing with membranes (P systems).pdf:pdf},
issn = {03032647},
journal = {Biosystems},
keywords = {Membrane computing,Molecular computing,NP-complete problem,Natural computing,P system,Turing computability},
month = {3},
number = {3},
pages = {139--158},
title = {{From cells to computers: computing with membranes (P systems)}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S030326470000143X},
volume = {59},
year = {2001}
}

@inproceedings{Aboy2019,
abstract = {Spiking Neural P systems (in short, SNP systems) are computing models based on living neurons. SNP systems are non-deterministic and parallel, hence making use of a parallel processor such as a graphics processing unit (in short, GPU) is a natural candidate for simulations. Matrix representations and algorithms were previously developed for simulating SNP systems. In this work, our two results extend previous works in simulating SNP systems in the GPU: (a) the number of neurons the simulator can handle is now arbitrary; (b) SNP systems are now represented in a dense instead of sparse way. The impact in terms of time and space of these extensions to the GPU simulator are analysed. As expected, SNP systems with more neurons need more simulation time, although the simulator performance can scale (i.e. perform better) with larger GPUs. The dense representation helps in the simulation of larger systems.},
author = {Aboy, Blaine Corwyn D and Bariring, Edward James A and Carandang, Jym Paul and Cabarle, Francis George C and De La Cruz, Ren Tristan and Adorna, Henry N and Mart{\'{i}}nez-del-Amor, Miguel {\'{A}}ngel},
booktitle = {2019 International Conference on High Performance Computing \& Simulation (HPCS)},
doi = {10.1109/HPCS48598.2019.9188174},
file = {:D\:/jarak/Documents/Mendeley Desktop/Aboy et al. - 2019 - optimizations in CuSNP Simulator for Spiking Neural P Systems on CUDA GPUs.pdf:pdf},
isbn = {978-1-7281-4484-9},
keywords = {,CUDA,GPU computing,Membrane computing,Sparse Matrix-Vector,Spiking neural P systems},
month = {7},
pages = {535--542},
publisher = {IEEE},
title = {{Optimizations in CuSNP Simulator for Spiking Neural P Systems on CUDA GPUs}},
url = {https://ieeexplore.ieee.org/document/9188174/},
year = {2019}
}

@incollection{Zeng2010,
abstract = {Spiking neural P systems (SN P systems, for short) are a class of distributed parallel computing devices inspired from the way neurons communicate by means of spikes. In this work, a discrete structure representation of SN P systems with extended rules and without delay is proposed. Specifically, matrices are used to represent SN P systems. In order to represent the computations of SN P systems by matrices, configuration vectors are defined to monitor the number of spikes in each neuron at any given configuration; transition net gain vectors are also introduced to quantify the total amount of spikes consumed and produced after the chosen rules are applied. Nondeterminism of the systems is assured by a set of spiking transition vectors that could be used at any given time during the computation. With such matrix representation, it is quite convenient to determine the next configuration from a given configuration, since it involves only multiplication and addition of matrices after deciding the spiking transition vector.},
author = {Zeng, Xiangxiang and Adorna, Henry and Mart{\'{i}}nez-del-Amor, Miguel {\'{A}}ngel and Pan, Linqiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-18123-8_29},
editor= {Gheorghe, Marian and Hinze, Thomas and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Zeng et al. - 2010 - Matrix Representation of Spiking Neural P Systems.pdf:pdf},
isbn = {9783642181221},
pages = {377--391},
title = {{Matrix Representation of Spiking Neural P Systems}},
url = {http://link.springer.com/10.1007/978-3-642-18123-8{\_}29},
volume = {6501},
year = {2010}
}

@article{Martinez-del-Amor2021,
abstract = {To date, parallel simulation algorithms for spiking neural P (SNP) systems are based on a matrix representation. This way, the simulation is implemented with linear algebra operations, which can be easily parallelized on high performance computing platforms such as GPUs. Although it has been convenient for the first generation of GPU-based simulators, such as CuSNP, there are some bottlenecks to sort out. For example, the proposed matrix representations of SNP systems lead to very sparse matrices, where the majority of values are zero. It is known that sparse matrices can compromise the performance of algorithms since they involve a waste of memory and time. This problem has been extensively studied in the literature of parallel computing. In this paper, we analyze some of these ideas and apply them to represent some variants of SNP systems. We also provide a new simulation algorithm based on a novel compressed representation for sparse matrices. We also conclude which SNP system variant better suits our new compressed matrix representation.},
author = {Mart{\'{i}}nez-del-Amor, Miguel {\'{A}}ngel and Orellana-Mart{\'{i}}n, David and P{\'{e}}rez-Hurtado, Ignacio and Cabarle, Francis George C. and Adorna, Henry N.},
doi = {10.3390/pr9040690},
file = {:D\:/jarak/Documents/Mendeley Desktop/Mart{\'{i}}nez-del-Amor et al. - 2021 - Simulation of Spiking Neural P Systems with Sparse Matrix-Vector Operations.pdf:pdf},
issn = {2227-9717},
journal = {Processes},
keywords = {Compressed matrix representation,GPU computing,Simulation algorithm,Sparse matrix-vector operations,Spiking neural P systems},
month = {4},
number = {4},
pages = {690},
title = {{Simulation of Spiking Neural P Systems with Sparse Matrix-Vector Operations}},
url = {https://www.mdpi.com/2227-9717/9/4/690},
volume = {9},
year = {2021}
}

@inproceedings{Pan2010,
abstract = {In the "standard" way of simulating register machines by spiking neural P systems (in short, SN P systems), one neuron is associated with each instruction of the register machine that we want to simulate. In this note, a new way is introduced for simulating register machines by SN P systems, where only one neuron is used for all instructions of a register machine; in this way, we can use less neurons to construct universal SN P systems. Specifically, a universal system with extended rules (without delay) having 10 neurons is constructed. {\textcopyright} 2010 Springer-Verlag.},
address = {Berlin, Heidelberg},
author = {Pan, Linqiang and Zeng, Xiangxiang},
booktitle = {Membrane Computing},
doi = {10.1007/978-3-642-11467-0_29},
editor = {P{\u a}un, {\relax Gh}eorghe and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D\:/jarak/Documents/Mendeley Desktop/Pan, Zeng - 2010 - A Note on Small Universal Spiking Neural P Systems.pdf:pdf},
isbn = {978-3-642-11467-0},
pages = {436--447},
publisher = {Springer Berlin Heidelberg},
title = {{A Note on Small Universal Spiking Neural P Systems}},
url = {http://link.springer.com/10.1007/978-3-642-11467-0_29},
volume = {5957},
year = {2010}
}


@article{Freund2005,
abstract = {The original model of P systems with symbol objects introduced by P{\u{a}}un was shown to be computationally universal, provided that catalysts and priorities of rules are used. By reduction via register machines Sos{\'{i}}k and Freund proved that the priorities may be omitted from the model without loss of computational power. Freund, Oswald, and Sos{\'{i}}k considered several variants of P systems with catalysts (but without priorities) and investigated the number of catalysts needed for these specific variants to be computationally universal. It was shown that for the classic model of P systems with the minimal number of two membranes the number of catalysts can be reduced from six to five; using the idea of final states the number of catalysts could even be reduced to four. In this paper we are able to reduce the number of catalysts again: two catalysts are already sufficient. For extended P systems we even need only one membrane and two catalysts. For the (purely) catalytic systems considered by Ibarra only three catalysts are already enough. {\textcopyright} 2004 Elsevier B.V. All rights reserved.},
author = {Freund, Rudolf and Kari, Lila and Oswald, Marion and Sos{\'{i}}k, Petr},
doi = {10.1016/j.tcs.2004.06.029},
file = {:D\:/jarak/Documents/Mendeley Desktop/Freund et al. - 2005 - Computationally universal P systems without priorities two catalysts are sufficient.pdf:pdf},
issn = {03043975},
journal = {Theoretical Computer Science},
keywords = {Catalysts,Complexity,Membrane computing,P systems,Universality},
month = {2},
number = {2},
pages = {251--266},
title = {{Computationally universal P systems without priorities: two catalysts are sufficient}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S0304397504006553},
volume = {330},
year = {2005}
}

@article{Chen2008,
abstract = {We consider spiking neural P systems with rules allowed to introduce zero, one, or more spikes at the same time. The motivation comes both from constructing small universal systems and from generating strings; previous results from these areas are briefly recalled. Then, the computing power of the obtained systems is investigated, when considering them as number generating and as language generating devices. In the first case, a simpler proof of universality is obtained, while in the latter case we find characterizations of finite and recursively enumerable languages (without using any squeezing mechanism, as it was necessary in the case of standard rules). The relationships with regular languages are also investigated. {\textcopyright} Springer Science+Business Media B.V. 2007.},
author = {Chen, Haiming and Ionescu, Mihai and Ishdorj, Tseren-Onolt and Păun, Andrei and P{\u a}un, {\relax Gh}eorghe and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.1007/s11047-006-9024-6},
file = {:D\:/jarak/Documents/Mendeley Desktop/Chen et al. - 2008 - Spiking neural P systems with extended rules Universality and languages.pdf:pdf},
issn = {1567-7818},
journal = {Natural Computing},
keywords = {Chomsky hierarchy,Membrane computing,Spiking neural P systems,Turing computability,Universality},
month = {6},
number = {2},
pages = {147--166},
title = {{Spiking neural P systems with extended rules: universality and languages}},
url = {http://link.springer.com/10.1007/s11047-006-9024-6},
volume = {7},
year = {2008}
}

@article{Bernardini2005,
abstract = {We introduce an evolution-communication model for tissue P systems where communication rules are inspired by the general mechanism of cell communication based on signals and receptors: A multiset can enter a cell only in the presence of another multiset. Some basic variants of this model are also considered where communication is restricted either to be unidirectional or to use special multisets of objects called receptors. The universality for all these variants of tissue P systems is then proved by using two cells (three cells in the case of unidirectional communication) and rules of a minimal size. {\textcopyright} Springer-Verlag 2005.},
author = {Bernardini, Francesco and Gheorghe, Marian},
doi = {10.1007/s00500-004-0393-4},
file = {:D\:/jarak/Documents/Mendeley Desktop/Bernardini, Gheorghe - 2005 - Cell communication in tissue P systems universality results.pdf:pdf},
issn = {1432-7643},
journal = {Soft Computing},
keywords = {Membrane computing,Tissue,Turing computability},
month = {9},
number = {9},
pages = {640--649},
title = {{Cell communication in tissue P systems: universality results}},
url = {http://link.springer.com/10.1007/s00500-004-0393-4},
volume = {9},
year = {2005}
}

@article{Zhang2020,
abstract = {The model of membrane computing, also known under the name of P systems, is a bio-inspired large-scale parallel computing paradigm having a good potential for the design of massively parallel algorithms. For its implementation it is very natural to choose hardware platforms that have important inherent parallelism, such as field-programmable gate arrays (FPGAs) or compute unified device architecture (CUDA)-enabled graphic processing units (GPUs). This article performs an overview of all existing approaches of hardware implementation in the area of P systems. The quantitative and qualitative attributes of FPGA-based implementations and CUDA-enabled GPU-based simulations are compared to evaluate the two methodologies.},
author = {Zhang, Gexiang and Shang, Zeyi and Verlan, Sergey and Mart{\'{i}}nez-del-Amor, Miguel {\'{A}}. and Yuan, Chengxun and Valencia-Cabrera, Luis and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.1145/3402456},
file = {:D\:/jarak/Documents/Mendeley Desktop/Zhang et al. - 2020 - An Overview of Hardware Implementation of Membrane Computing Models.pdf:pdf},
issn = {0360-0300},
journal = {ACM Computing Surveys},
keywords = {Membrane computing,P systems,compute unified device architecture (CUDA),field programmable gate array (FPGA),graphic processing unit (GPU),hardware implementation},
month = {9},
number = {4},
pages = {1--38},
title = {{An Overview of Hardware Implementation of Membrane Computing Models}},
url = {https://dl.acm.org/doi/10.1145/3402456},
volume = {53},
year = {2020}
}

@article{Gheorghe2021,
abstract = {Structural and behavioural properties of models are very important in development of complex systems and applications. In this paper, we investigate such properties for some classes of SN P systems. First, a class of SN P systems associated to a set of routing problems are investigated through their matrix representation. This allows to make certain connections amongst some of these problems. Secondly, the behavioural properties of these SN P systems are formally verified through a natural and direct mapping of these models into kP systems which are equipped with adequate formal verification methods and tools. Some examples are used to prove the effectiveness of the verification approach.},
author = {Gheorghe, Marian and Lefticaru, Raluca and Konur, Savas and Niculescu, Ionuţ Mihai and Adorna, Henry N.},
doi = {10.1007/s41965-021-00075-1},
file = {:D\:/jarak/Documents/Mendeley Desktop/Gheorghe et al. - 2021 - Spiking neural P systems matrix representation and formal verification.pdf:pdf},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Formal verification,Kernel P systems,Membrane computing,Petri nets,Spiking neural P systems,formal,k pw orkbench,kPWorkbench,kernel p systems,membrane computing,petri nets,spiking neural p systems},
month = {6},
number = {2},
pages = {133--148},
title = {{Spiking neural P systems: matrix representation and formal verification}},
url = {https://doi.org/10.1007/s41965-021-00075-1 https://link.springer.com/10.1007/s41965-021-00075-1},
volume = {3},
year = {2021}
}

@inproceedings{Hu2016,
abstract = {Spiking neural P systems (in short, SN P systems) is a class of distributed parallel computing models. Parallel computation of matrix operations has been supported on some new computing devices such as GPU, which provides a promising way to simulate the parallel computation of SN P systems. In this paper a matrix representation method of parallel computation for SN P systems is developed. In firing mechanism of SN P systems, the delay factor plays the role of controlling the receiving of spikes in neurons and the opportunity of emitting the spikes after the firing. In order to achieve the parallel computation of SN P systems, several matrices or vectors are introduced to decompose the firing mechanism of neurons. The parallel computation procedure of SN P systems can be achieved by the operations of the matrices or vectors. Two examples are used to illustrate the parallel computation procedure using the matrix operations.},
address = {Singapore},
author = {Hu, Juan and Chen, Guangchun and Peng, Hong and Wang, Jun and Huang, Xiangnian and Luo, Xiaohui},
booktitle = {Bio-inspired Computing -- Theories and Applications},
doi = {10.1007/978-981-10-3611-8_18},
editor = {Gong, Maoguo and Pan, Linqiang and Song, Tao and Zhang, Gexiang},
file = {:D\:/jarak/Documents/Mendeley Desktop/Hu et al. - 2016 - Matrix Representation of Parallel Computation for Spiking Neural P Systems.pdf:pdf},
isbn = {978-981-10-3611-8},
keywords = {,Matrix representation,P systems,Parallel computing,Spiking neural P system},
pages = {187--199},
publisher = {Springer Singapore},
series = {Communications in Computer and Information Science},
title = {{Matrix Representation of Parallel Computation for Spiking Neural P Systems}},
url = {http://link.springer.com/10.1007/978-981-10-3611-8_18},
volume = {681},
year = {2016}
}

@incollection{Colomer2010,
abstract = {P systems provide a high level computational modeling framework which integrates the structural and dynamic aspects of ecosystems in a comprehensive and relevant way. In previous works, several ecosystems modeled by using P systems were presented. The good results obtained encourage us to study new ecosystems such as the one presented in this paper. Pyrenean Chamois (Rupicapra p. pyrenaica) is an ungulate species inhabiting the Catalan Pyrenees. In recent years, several diseases have caused a drastic decrease in the number of individuals. Since they provide significant economic contributions in the area and constitutes an important food resource for obligate and facultative scavengers, it is very interesting to provide a model in order to facilitate the management of their ecosystems.},
author = {Colomer, Maria Angels and Lav{\'{i}}n, Santiago and Marco, Ignasi and Margalida, Antoni and P{\'{e}}rez-Hurtado, Ignacio and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Sanuy, Delf{\'{i}} and Serrano, Emmanuel and Valencia-Cabrera, Luis},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-18123-8_13},
editor = {Gheorghe, Marian and Hinze, Thomas and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D\:/jarak/Documents/Mendeley Desktop/Colomer et al. - 2010 - Modeling Population Growth of Pyrenean Chamois (Rupicapra p. pyrenaica) by Using P-Systems.pdf:pdf},
isbn = {9783642181221},
keywords = {Membrane computing},
pages = {144--159},
publisher = {Springer Berlin Heidelberg},
title = {{Modeling Population Growth of Pyrenean Chamois (Rupicapra p. pyrenaica) by Using P-Systems}},
url = {http://link.springer.com/10.1007/978-3-642-18123-8_13},
volume = {6501},
year = {2010}
}

@inproceedings{Gheorghe2010,
abstract = {In this extended abstract there are surveyed various testing approaches utilised so far for applications based on P systems.},
address = {Berlin, Heidelberg},
author = {Gheorghe, Marian and Ipate, Florentin},
booktitle = {Membrane Computing},
doi = {10.1007/978-3-642-18123-8_2},
editor = {Gheorghe, Marian and Hinze, Thomas and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D\:/jarak/Documents/Mendeley Desktop//Gheorghe, Ipate - 2010 - Testing Based on P Systems -- An Overview.pdf:pdf},
isbn = {978-3-642-18123-8},
pages = {3--6},
publisher = {Springer Berlin Heidelberg},
title = {{Testing Based on P Systems -- An Overview}},
url = {http://link.springer.com/10.1007/978-3-642-18123-8_2},
volume = {6501},
year = {2010}
}

@inproceedings{Huang2016,
abstract = {This paper presents an approach for classifying different types of faults occurring in power transmission lines by integrating Fuzzy Reasoning Spiking Neural P Systems (FRSNPS) with wavelet transform and singular value decomposition. This is the first attempt to extend the application of FRSNPS from fault section identification to fault classification. The effectiveness of the introduced method is verified by various cases of fault types in power transmission lines.},
address = {Singapore},
author = {Huang, Kang and Zhang, Gexiang and Wei, Xiaoguang and Rong, Haina and He, Yangyang and Wang, Tao},
booktitle = {Bio-inspired Computing -- Theories and Applications},
doi = {10.1007/978-981-10-3611-8_12},
editor = {Gong, Maoguo and Pan, Linqiang and Song, Tao and Zhang, Gexiang},
file = {:D\:/jarak/Documents/Mendeley Desktop/Huang et al. - 2016 - Fault Classification of Power Transmission Lines Using Fuzzy Reasoning Spiking Neural P Systems.pdf:pdf},
isbn = {978-981-10-3611-8},
keywords = {Fault classification,Fuzzy reasoning spiking neural P systems,Membrane computing},
pages = {109--117},
publisher = {Springer Singapore},
series = {Communications in Computer and Information Science},
title = {{Fault Classification of Power Transmission Lines Using Fuzzy Reasoning Spiking Neural P Systems}},
url = {http://link.springer.com/10.1007/978-981-10-3611-8_12},
volume = {681},
year = {2016}
}

@inproceedings{Liu2016,
abstract = {Membrane computing is a distributed and parallel bio-inspired computing paradigm providing new computing models. The computational model of membrane computing is called “P systems”. Despite several P systems simulation tools have been built, the general object-oriented framework of P systems lacks. This study gives the computer storage structure of P systems, the object-oriented static model and the object-oriented dynamic model of membrane computing using Umlet. This study intuitively gives the concepts and operations involved in the membrane computing, which facilitates a better understanding of the thought of membrane computing, and provides support for research personnel having no membrane computing foundation.},
address = {Singapore},
author = {Liu, Xiyu and Zhao, Yuzhen and Wang, Wenping},
booktitle = {Bio-inspired Computing -- Theories and Applications},
doi = {10.1007/978-981-10-3611-8_17},
editor = {Gong, Maoguo and Pan, Linqiang and Song, Tao and Zhang, Gexiang},
file = {:D\:/jarak/Documents/Mendeley Desktop/Liu, Zhao, Wang - 2016 - A General Object-Oriented Description for Membrane Computing.pdf:pdf},
isbn = {978-981-10-3611-8},
keywords = {Membrane computing,Modeling,Object-oriented method,P system,UML},
pages = {168--186},
publisher = {Springer Singapore},
series = {Communications in Computer and Information Science},
title = {{A General Object-Oriented Description for Membrane Computing}},
url = {http://link.springer.com/10.1007/978-981-10-3611-8_17},
volume = {681},
year = {2016}
}

@inproceedings{Florea2017,
abstract = {This paper proposes a novel solution to control multi-robot systems that is based on controllers designed as numerical P systems (a membrane computing paradigm). These controllers can be easily integrated within ROS (Robot Operating System) and benefit from this powerful ecosystem of applications. A series of four case studies on real e-puck robots validate this approach.},
author = {Florea, Andrei George and Buiu, Cătălin},
% booktitle = {Proceedings of the 9th International Conference on Electronics, Computers and Artificial Intelligence, ECAI 2017},
booktitle = {2017 9th International Conference on Electronics, Computers and Artificial Intelligence (ECAI)},
doi = {10.1109/ECAI.2017.8166411},
file = {:D\:/jarak/Documents/Mendeley Desktop/Florea, Buiu - 2017 - Modelling multi-robot interactions using a generic controller based on numerical P systems and ROS.pdf:pdf},
% isbn = {9781509064571},
isbn = {978-1-5090-6457-1},
keywords = {Control,Enzymatic Numerical P Systems,Membrane computing,Multi-robot systems,Numerical P systems,Robot Operating Systems (ROS)},
month = {6},
pages = {1--6},
publisher = {IEEE},
title = {{Modelling multi-robot interactions using a generic controller based on numerical P systems and ROS}},
url = {http://ieeexplore.ieee.org/document/8166411/},
volume = {2017},
year = {2017}
}

@article{Paun2006a,
abstract = {With inspiration from the economic reality, where numbers are basic entities to work with, we propose a genuinely new kind of P systems, where numerical variables evolve, starting from initial values, by means of production functions and repartition protocols. We prove that non-deterministic systems of this type, using polynomial production functions, characterize the Turing computable sets of natural numbers, while deterministic systems, with polynomial production functions having non-negative coefficients, compute strictly more than semilinear sets of natural numbers. A series of research topics to be addressed in this framework are mentioned.},
author = {P{\u a}un, {\relax Gh}eorghe and Păun, Radu},
file = {:D\:/jarak/Documents/Mendeley Desktop/Păun, Păun - 2006 - Membrane computing and economics Numerical P systems.pdf:pdf},
issn = {01692968},
journal = {Fundamenta Informaticae},
keywords = {Economics,Membrane computing,Numerical P systems,Turing computability,Universality},
number = {1-2},
pages = {213--227},
title = {{Membrane computing and economics: Numerical P systems}},
volume = {73},
year = {2006}
}

@article{Yuan2019,
abstract = {Image edge detection is a fundamental problem in image processing and computer vision, particularly in the area of feature extraction. However, the time complexity increases squarely with the increase of image resolution in conventional serial computing mode. This results in being unbearably time consuming when dealing with a large amount of image data. In this paper, a novel resolution free parallel implementation algorithm for gradient based edge detection, namely EDENP, is proposed. The key point of our method is the introduction of an enzymatic numerical P system (ENPS) to design the parallel computing algorithm for image processing for the first time. The proposed algorithm is based on a cell-like P system with a nested membrane structure containing four membranes. The start and stop of the system is controlled by the variables in the skin membrane. The calculation of edge detection is performed in the inner three membranes in a parallel way. The performance and efficiency of this algorithm are evaluated on the CUDA platform. The main advantage of EDENP is that the time complexity of O(1) can be achieved regardless of image resolution theoretically.},
author = {Yuan, Jianying and Guo, Dequan and Zhang, Gexiang and Paul, Prithwineel and Zhu, Ming and Yang, Qiang},
doi = {10.3390/molecules24071235},
file = {:D\:/jarak/Documents/Mendeley Desktop/Yuan et al. - 2019 - A resolution-free parallel algorithm for image edge detection within the framework of enzymatic numerical P systems.pdf:pdf},
issn = {1420-3049},
journal = {Molecules},
keywords = {Edge detection,Enzymatic Numerical P Systems,Enzymatic numerical P system,Membrane computing,Resolution free},
month = {3},
number = {7},
pages = {1235},
title = {{A Resolution-Free Parallel Algorithm for Image Edge Detection within the Framework of Enzymatic Numerical P Systems}},
url = {https://www.mdpi.com/1420-3049/24/7/1235},
volume = {24},
year = {2019}
}

@inproceedings{Leporati2014,
abstract = {We prove that all-parallel enzymatic numerical P systems whose production functions can be expressed as a combination of sums, differences, products and integer divisions characterise PSPACE when working in polynomial time. We also show that, when only sums and differences are available, exactly the problems in P can be solved in polynomial time. These results are proved by showing how EN P systems and random access machines, running in polynomial time and using the same basic operations, can simulate each other efficiently.},
address = {Berlin, Heidelberg},
author = {Leporati, Alberto and Mauri, Giancarlo and Porreca, Antonio E. and Zandron, Claudio},
booktitle = {Membrane Computing},
doi = {10.1007/978-3-642-54239-8_18},
editor = {Alhazov, Artiom and Cojocaru, Svetlana and Gheorghe, Marian and Rogozhin, Yurii and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Leporati et al. - 2014 - Enzymatic Numerical P Systems Using Elementary Arithmetic Operations.pdf:pdf},
isbn = {978-3-642-54239-8},
keywords = {Enzymatic Numerical P Systems},
pages = {249--264},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
title = {{Enzymatic Numerical P Systems Using Elementary Arithmetic Operations}},
url = {http://link.springer.com/10.1007/978-3-642-54239-8{\_}18},
volume = {8340 LNCS},
year = {2014}
}


@inproceedings{Maeda2014,
abstract = {Membrane computing, which is a computational model inspired by the structures and behaviors of living cells, has considerable attention as one of non-silicon based computing. In the present paper, we propose EN P systems for basic operations, and sorting. We first propose three EN P systems for computing three logic operations, OR, AND, and EX-OR functions. All of the EN P systems work in a constant number of steps. Next, we propose two EN P systems that operates as a half adder and a full adder, and then, propose two EN P system for additions of two binary numbers and n binary numbers. We show the EN P systems for two additions work in O(m) steps and O(nm) steps, respectively. Finally, we propose two EN P systems for sorting. We propose an EN P system for compare-and-exchange operation. Then, using the EN P system as sub-systems, we propose an EN P system for sorting n numbers, and show that the EN P system works in O(n) steps.},
author = {Maeda, Shohei and Fujiwara, Akihiro},
booktitle = {2014 Joint 7th International Conference on Soft Computing and Intelligent Systems (SCIS) and 15th International Symposium on Advanced Intelligent Systems (ISIS)},
doi = {10.1109/SCIS-ISIS.2014.7044708},
file = {:D\:/jarak/Documents/Mendeley Desktop/Maeda, Fujiwara - 2014 - Enzymatic numerical P systems for basic operations and sorting.pdf:pdf},
isbn = {978-1-4799-5955-6},
keywords = {Enzymatic Numerical P Systems},
month = {12},
pages = {1333--1338},
publisher = {IEEE},
title = {{Enzymatic numerical P systems for basic operations and sorting}},
url = {http://ieeexplore.ieee.org/document/7044708/},
year = {2014}
}

@inproceedings{Pavel2010,
abstract = {A P system represents a distributed and parallel computing model in which basic data structures are multi-sets, strings or numerical variables. Numerical P systems have been introduced for possible applications in economics. A simulator for numerical P systems (SNUPS) has been designed, implemented and made available to the scientific community by the authors of this paper. SNUPS allows the development of a wide range of applications, from modeling and simulation of ordinary differential equations, to design and simulation of computational blocks for cognitive architectures and of membrane controllers for autonomous mobile robots. This paper introduces a new class of membrane computing systems, that of enzymatic numerical P systems, in which enzyme-like variables allow the existence of more than one production function in each membrane. The way this new type of deterministic numerical P systems works and the corresponding implementation in SNUPS are detailed, together with an illustrative example. {\textcopyright} 2010 IEEE.},
address = {Changsha, China},
author = {Pavel, Ana and Arsene, Octavian and Buiu, Catalin},
booktitle = {2010 IEEE Fifth International Conference on Bio-Inspired Computing: Theories and Applications (BIC-TA)},
doi = {10.1109/BICTA.2010.5645071},
editor = {Li, Kenli and Tang, Zhuo and Li, Renfa and Nagar, Atulya K. and Thamburaj, Robinson},
file = {:D\:/jarak/Documents/Mendeley Desktop/Pavel, Arsene, Buiu - 2010 - Enzymatic numerical P systems - A new class of membrane computing systems.pdf:pdf},
isbn = {978-1-4244-6437-1},
keywords = {Enzymatic Numerical P Systems,Enzymes,Membrane computing,Numerical P systems},
month = {9},
pages = {1331--1336},
publisher = {IEEE},
title = {{Enzymatic numerical P systems - a new class of membrane computing systems}},
url = {http://ieeexplore.ieee.org/document/5645071/},
year = {2010}
}

@article{Pang2018,
abstract = {Enzymatic numerical P systems are inspired by the biological structure of cells and the 'processing of information' regulated by enzymes on chemical objects, where natural numbers are basic entities to work with. Enzymatic numerical P systems can perform arithmetic operations but not complex numerical calculations, such as obtaining suitable values or finding the maximum or minimum element from the data sets. In this paper, a variant of enzymatic numerical P systems named an enzymatic numerical P system with an enzymatic environment is proposed, which can make numerical operations more flexible with regulations of external enzymes. We design several parallel computational frameworks for complex numerical calculations by the enzymatic numerical P system with an enzymatic environment. A parallel framework is achieved for performing support vector machine (SVM) calculations and sequential minimal optimization by the enzymatic numerical P system with an enzymatic environment. The experimental results obtained using a GPU prove that our method is 5.34 times more efficient than the traditional serial SVM calculation, without any loss in accuracy.},
author = {Pang, Shanchen and Ding, Tong and Rodr{\'{i}}guez-Pat{\'{o}}n, Alfonso and Song, Tao and Pan, Zheng},
doi = {10.1109/ACCESS.2018.2876364},
file = {:D\:/jarak/Documents/Mendeley Desktop/Pang et al. - 2018 - A Parallel Bioinspired Framework for Numerical Calculations Using Enzymatic P System With an Enzymatic Environment.pdf:pdf},
issn = {2169-3536},
journal = {IEEE Access},
keywords = {Artificial intelligence,Enzymatic Numerical P Systems,Membrane computing,Parallel architectures},
pages = {65548--65556},
title = {{A Parallel Bioinspired Framework for Numerical Calculations Using Enzymatic P System With an Enzymatic Environment}},
url = {https://ieeexplore.ieee.org/document/8493476/},
volume = {6},
year = {2018}
}

@article{Raghavan2020,
abstract = {Membrane computing is a computational paradigm inspired by the structure and behavior of a living cell. P Systems are the computing devices that are used to realize membrane computing models. Numerous theoretical studies on many variants of P Systems have shown them to be computationally universal. There is a wide range of applications of P Systems from modeling of biological processes to image processing. Among many variants of P Systems, one of the most important is Enzymatic Numerical P System (ENPS). ENPS is a class of P System in which membranes operate on numerical values. To realize the power of ENPS there are a few simulators developed. Each and every simulator has some advantages as well as some disadvantages. Here, a GPU based simulator using Python as a user interaction language is developed. This tool is a completely parallel variant, compatible with a Python based sequential simulator (PeP) which was the first Python based work for ENPS. The developed simulator uses CUDA to interact with GPU and gives the desired speed up, while processing the membranes. There are two important case studies which show the performance of the developed tool to be far better than the other serial simulators.},
author = {Raghavan, S. and Rai, Shanthanu S. and Rohit, M.P. and Chandrasekaran, K.},
doi = {10.1016/j.biosystems.2020.104186},
file = {:D\:/jarak/Documents/Mendeley Desktop/Raghavan et al. - 2020 - GPUPeP Parallel Enzymatic Numerical P System simulator with a Python-based interface.pdf:pdf},
issn = {03032647},
journal = {Biosystems},
keywords = {ENPS simulator,Enzymatic Numerical P System,Enzymatic Numerical P Systems,GPUPeP,Graphical Processing Unit (GPU),Membrane computing,Python-based interface},
month = {10},
number = {June},
pages = {104186},
title = {{GPUPeP: Parallel Enzymatic Numerical P System simulator with a Python-based interface}},
url = {https://doi.org/10.1016/j.biosystems.2020.104186 https://linkinghub.elsevier.com/retrieve/pii/S0303264720300824},
volume = {196},
year = {2020}
}

@inproceedings{Perez-Hurtado2018,
abstract = {Since the beginnings of membrane computing, software and hardware tools have been implemented for simulating computations of the proposed models. Some of these simulators are relatively generic, providing enough flexibility for a wide variety of models and others are ad-hoc simulators that reproduce computations of a single design that has been hard-coded or computations of a single type of model. On the one hand, generic tools are excellent assistants for the researchers while verifying their designs. On the other hand, the efficiency of specific tools in terms of simulation performance for a given design sacrifices the flexibility of the previous ones. In this paper, it is presented for the first time a tool that breaks this duality, we have implemented a compiler which receives as input the definition of a design in the P-Lingua language and produces as output source code in the C++ language for an ad-hoc simulator that has been optimized for the input design. The objective of this work is twofold: On the one hand, we have extended the P-Lingua framework to include some semantic features concerning to the models, such as rule patterns and derivation modes, that can be written in an explicit manner within their own file. On the other hand, we have developed a GNU GPLv3 command-line tool for Linux which works in the same manner as conventional compilers. Finally, we include in this paper a few examples for different types of cell-like and tissue-like models.},
address = {Auckland, New Zealand},
author = {P{\'{e}}rez-Hurtado, Ignacio and Orellana-Mart{\'{i}}n, David and Zhang, Gexiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
booktitle = {Pre-proceedings of Asian Branch of International Conference on Membrane Computing},
editor = {Dinneen, Michael J. and Nicolescu, Radu},
pages = {149--163},
publisher = {Centre for Discrete Mathematics and Theoretical Computer Science},
title = {{P-Lingua Compiler: A Tool for Generating Ad-hoc Simulators in Membrane Computing}},
url = {https://www.cs.auckland.ac.nz/research/groups/CDMTCS/researchreports/publication-list-bydate.php?selected-date=2018},
year = {2018}
}

@incollection{Verlan2012,
abstract = {In this article we present the design of a fast hardware simulator for P systems using the field-programmable gate array (FPGA) technology. The simulator is non-deterministic and it uses a constant time procedure to choose one of the computational paths. The obtained strategy is fair and it is based on a pre-computation of all possible rule applications. This pre-computation is obtained by using the representation of all possible multisets of rules' applications as context-free languages. Then using a standard technique involving formal power series it is possible to obtain the generating series of corresponding languages that permits to construct the structure representing all possible rule applications for any configuration. We give a hardware design implementing some concrete examples and present the obtained results which feature an important speed-up. {\textcopyright} 2013 Springer-Verlag.},
address = {Berlin, Heidelberg},
author = {Verlan, Sergey and Quiros, Juan},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-36751-9_27},
editor = {Csuhaj-Varj{\'{u}}, Erzs{\'{e}}bet and Gheorghe, Marian and Rozenberg, Grzegorz and Salomaa, Arto and Vaszil, Gy{\"{o}}rgy},
isbn = {9783642367502},
pages = {404--423},
publisher = {Springer Berlin Heidelberg},
title = {{Fast hardware implementations of P systems}},
url = {https://doi.org/10.1007/978-3-642-36751-9_27 http://link.springer.com/10.1007/978-3-642-36751-9_27},
volume = {7762},
year = {2012}
}

@incollection{Syropoulos2004,
abstract = {P systems is a new model of computation, inspired by natural processes, that has a distributive nature. By exploring this distributive nature of P systems, we have built a purely distributive simulation of P systems. The simulation, whose implementation is described here, was programmed in the Java programming language and makes heavy use of its Remote Method Invocation protocol. The class of P systems that the simulator can accept is a subset of the NOP2 (coo, tar) family of systems, which have the computational power of Turing machines. The paper concludes with some remarks concerning the usefulness of the simulation. In addition, there is a brief discussion of some ideas that can be used in the formulation of a foundation of distributive computing. {\textcopyright} Springer-Verlag Berlin Heidelberg 2004.},
address = {Berlin, Heidelberg},
author = {Syropoulos, Apostolos and Mamatas, Eleftherios G. and Allilomes, Peter C. and Sotiriades, Konstantinos T.},
booktitle = {Membrane Computing: International Workshop, WMC 2003, Tarragona, Spain, July 17-22, 2003. Revised Papers},
doi = {10.1007/978-3-540-24619-0_25},
editor = {Mart{\'{i}}n-Vide, Carlos and Mauri, Giancarlo and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto},
isbn={978-3-540-24619-0},
keywords = {Distributed Computing,Java's Remote Method Invocation,Natural computation,Object-oriented programming,P systems,Simulation},
pages = {357--368},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
title = {{A Distributed Simulation of Transition P Systems}},
url = {http://dx.doi.org/10.1007/978-3-540-24619-0_25 http://link.springer.com/10.1007/978-3-540-24619-0_25},
volume = {2933},
year = {2004}
}

@article{Liu2020,
author = {Liu, Yezhou and Nicolescu, Radu and Sun, Jing},
doi = {10.1007/s41965-020-00036-0},
file = {:D\:/jarak/Documents/Mendeley Desktop/Liu, Nicolescu, Sun - 2020 - Formal verification of cP systems using PAT3 and ProB.pdf:pdf},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Formal verification,Model checking,P systems,Subset sum problem,cP systems,cp systems,formal verification,model checking,p systems,subset sum problem},
month = {6},
number = {2},
pages = {80--94},
title = {{Formal verification of cP systems using PAT3 and ProB}},
url = {https://doi.org/10.1007/s41965-020-00036-0 http://link.springer.com/10.1007/s41965-020-00036-0},
volume = {2},
year = {2020}
}

@article{Lefticaru2011,
abstract = {This paper presents an approach to P systems verification using the Spin model checker. The authors have developed a tool which implements the proposed approach and can automatically transform P system specifications from P-Lingua into Promela, the language accepted by the well known model checker Spin. The properties expected for the P system are specified using some patterns, representing high level descriptions of frequently asked questions, formulated in natural language. These properties are automatically translated into LTL specifications for the Promela model and the Spin model checker is run against them. In case a counterexample is received, the Spin trace is decoded and expressed as a P system computation. The tool has been tested on a number of examples and the results obtained are presented in the paper.},
author = {Lefticaru, Raluca and Tudose, Cristina and Ipate, Florentin},
doi = {10.4018/jncr.2011070101},
file = {:D\:/jarak/Documents/Mendeley Desktop/Lefticaru, Tudose, Ipate - 2011 - Towards Automated Verification of P Systems Using Spin.pdf:pdf},
issn = {1947-928X},
journal = {International Journal of Natural Computing Research},
keywords = {formal verification,model checking,natural language,p systems,p-lingua,spin},
month = {7},
number = {3},
pages = {1--12},
title = {{Towards Automated Verification of P Systems Using Spin}},
url = {http://services.igi-global.com/resolvedoi/resolve.aspx?doi=10.4018/jncr.2011070101},
volume = {2},
year = {2011}
}

@inproceedings{Oltean2008,
abstract = {In this paper we summarize the existing principles for building unconventional computing devices that involve delayed signals for encoding solutions to NP-complete problems. We are interested in the following aspects: the properties of the signal, the operations performed within the devices, some components required for the physical implementation, precision required for correctly reading the solution and the decrease in the signal's strength. Six problems have been solved so far by using the above enumerated principles: Hamiltonian path, travelling salesman, bounded and unbounded subset sum, Diophantine equations and exact cover. For the hardware implementation several types of signals can be used: light, electric power, sound, electro-magnetic etc.},
address = {Berlin, Heidelberg},
author = {Oltean, Mihai and Muntean, Oana},
booktitle = {Optical SuperComputing},
doi = {10.1007/978-3-540-85673-3_10},
editor = {Dolev, Shlomi and Haist, Tobias and Oltean, Mihai},
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Oltean, Muntean - 2008 - Solving NP-Complete Problems with Delayed Signals An Overview of Current Research Directions.pdf:pdf},
isbn = {978-3-540-85673-3},
keywords = {Delay lines,NP-complete,Optical computing,Signal-based computing,Unconventional computing},
pages = {115--127},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
title = {{Solving NP-Complete Problems with Delayed Signals: An Overview of Current Research Directions}},
url = {http://link.springer.com/10.1007/978-3-540-85673-3{\_}10},
volume = {5172 LNCS},
year = {2008}
}

@techreport{Wiseman2016,
address = {Ottawa},
author = {Wiseman, Erica},
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Wiseman - 2016 - Next Generation Computing.pdf:pdf},
institution = {National Research Council of Canada},
month = {3},
number = {DRDC-RDDC-2017-C049},
pages = {1--84},
title = {{Next Generation Computing}},
url = {https://cradpdf.drdc-rddc.gc.ca/PDFS/unc268/p805200_A1b.pdf},
year = {2016}
}

% @article{Liu2021,
% abstract = {Multisets are widely used in membrane computing models such as cP systems. In this paper, we formally define the first-order one-way unification problem for labelled nested multisets, and propose a corresponding algorithm named LNMU (labelled nested multiset unification algorithm). LNMU is a nondeterministic algorithm that consists of eight transformations. Supported by a good strategy, LNMU can solve well-formed labelled nested multiset unification problems in linear time.},
% author = {Liu, Yezhou and Nicolescu, Radu and Sun, Jing},
% doi = {10.1007/s41965-021-00076-0},
% file = {:D\:/jarak/Documents/Mendeley Desktop/Liu, Nicolescu, Sun - 2021 - An efficient labelled nested multiset unification algorithm.pdf:pdf},
% issn = {2523-8906},
% journal = {Journal of Membrane Computing},
% keywords = {Algorithm,Membrane computing,Multiset,Unification,cP systems},
% month = {5},
% title = {{An efficient labelled nested multiset unification algorithm}},
% url = {https://doi.org/10.1007/s41965-021-00076-0 https://link.springer.com/10.1007/s41965-021-00076-0},
% year = {2021}
% }

@article{Liu2021,
abstract = {Multisets are widely used in membrane computing models such as cP systems. In this paper, we formally define the first-order one-way unification problem for labelled nested multisets, and propose a corresponding algorithm named LNMU (labelled nested multiset unification algorithm). LNMU is a nondeterministic algorithm that consists of eight transformations. Supported by a good strategy, LNMU can solve well-formed labelled nested multiset unification problems in linear time.},
author = {Liu, Yezhou and Nicolescu, Radu and Sun, Jing},
doi = {10.1007/s41965-021-00076-0},
file = {:D\:/jarak/Documents/Mendeley Desktop/Liu, Nicolescu, Sun - 2021 - An efficient labelled nested multiset unification algorithm.pdf:pdf},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Algorithm,Membrane computing,Multiset,Unification,cP systems},
month = {9},
number = {3},
pages = {194--204},
% publisher = {Springer Singapore},
title = {{An efficient labelled nested multiset unification algorithm}},
url = {https://doi.org/10.1007/s41965-021-00076-0 https://link.springer.com/10.1007/s41965-021-00076-0},
volume = {3},
year = {2021}
}

@article{Perez-Hurtado2019,
abstract = {Membrane computing is a bio-inspired computing paradigm that lacks in vivo implementation. That is why software or hardware implementations have to be used to validate models. Several tools have been created for this purpose; some of them are created for specific purposes, such as solving a computationally hard problem; and others are more generic, to cover a broad spectrum of possible models. The former have the advantage of being very efficient, crucial for solving large instances of certain problems; however, this efficiency leads to a loss of generality, since algorithms are usually hard-coded and they do not allow other models. On the contrary, the latter are perfect tools for researchers, given that new models can be checked without much effort by defining them in the framework; since these algorithms have to simulate as many models as possible, they lack specificities to improve the performance. P-Lingua has been widely used to simulate membrane systems, having integrated both a language and a simulator. To obtain better results in terms of time used to simulate models defined in this language, a new perspective is studied. The model defined in P-Lingua will be compiled into C++ source code that will implement an ad hoc simulator. This code will consider specifications about how rules have to be executed, that is, some simple specifications of the semantics. To show how it works, some examples of specifications of models will be presented, which can be simulated using the new-developed GNU GPLv3 command-line tool pcc.},
author = {P{\'{e}}rez-Hurtado, Ignacio and Orellana-Mart{\'{i}}n, David and Zhang, Gexiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.1007/s41965-019-00014-1},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Membrane computing,P-Lingua,Simulators},
month = {6},
number = {2},
pages = {93--102},
title = {{P-Lingua in two steps: flexibility and efficiency}},
url = {https://doi.org/10.1007/s41965-019-00014-1 http://link.springer.com/10.1007/s41965-019-00014-1},
volume = {1},
year = {2019}
}

@online{MeCoSim,
date = {2021},
organization = {Universidad de Sevilla},
title = {{MeCoSim Membrane Computing Simulator}},
url = {http://www.p-lingua.org/mecosim/},
urldate = {2021-09-04},
}

@inproceedings{Florea2016,
abstract = {Robotic swarms are multi-robot systems with no central coordination. The swarm as a whole is capable of displaying complex behaviors even if the robots are very simple and limited in sensing capabilities. The interaction between robots is only local and may also take place indirectly through the environment. The main contribution of this paper is that it demonstrates that membrane computing (XP colonies in this case) is a valid instrument for modeling and control of robots in a swarm. More, as membrane systems are parallel and distributed models, this makes the use of XP colonies to control robots in a swarm a valuable approach to the control of swarms of hundreds and thousands of robots where the parallelization of the control is a must. A case study on the synchronized dispersion of robots in a swarm is presented together with demonstration videos.},
author = {Florea, Andrei George and Buiu, Cătălin},
booktitle = {2016 8th International Conference on Electronics, Computers and Artificial Intelligence (ECAI)},
doi = {10.1109/ECAI.2016.7861107},
file = {:D\:/jarak/Documents/Mendeley Desktop/Florea, Buiu - 2016 - Synchronized dispersion of robotic swarms using XP colonies.pdf:pdf},
isbn = {978-1-5090-2047-8},
keywords = {Dispersion,Membrane computing,P/XP colonies,Swarm robotics,Synchronization},
month = {6},
pages = {1--6},
publisher = {IEEE},
title = {{Synchronized dispersion of robotic swarms using XP colonies}},
url = {http://ieeexplore.ieee.org/document/7861107/},
year = {2016}
}

@inproceedings{Florea2019,
abstract = {Membrane computing (or P systems) is already a mature area of natural computing, inspired by the architecture and functioning of biological cells. Numerous theoretical results and application studies have demonstrated the power of P systems as distributed and parallel computing models. In this regard, there has been an increasing interest lately in the application of membrane computing in robotics. This has led to the introduction of new theoretical models of membrane systems (e.g. enzymatic numerical P systems) and the design of novel ways to control robots and swarms of robots using membrane systems. The problem addressed in this paper is sensor fusion for autonomous drone waypoint navigation, and a solution based on numerical P systems and Robot Operating System (ROS, a widely used software framework for building robotic systems) is developed and presented here. A critical analysis of the results offers new insights into the advantages and limitations of the use of membrane computing in controlling robots and drones.},
author = {Florea, Andrei George and Buiu, Cătălin},
booktitle = {2019 22nd International Conference on Control Systems and Computer Science (CSCS)},
doi = {10.1109/CSCS.2019.00027},
file = {:D\:/jarak/Documents/Mendeley Desktop/Florea, Buiu - 2019 - Sensor Fusion for Autonomous Drone Waypoint Navigation Using ROS and Numerical P Systems A Critical Analysis of It.pdf:pdf},
isbn = {978-1-7281-2331-8},
keywords = {Fiducial,Membrane computing,Quadcopter,Sensor fusion,Waypoint},
month = {5},
pages = {112--117},
publisher = {IEEE},
title = {{Sensor Fusion for Autonomous Drone Waypoint Navigation Using ROS and Numerical P Systems: A Critical Analysis of Its Advantages and Limitations}},
url = {https://ieeexplore.ieee.org/document/8745259/},
year = {2019}
}

@book{Florea2017a,
abstract = {Developments in bio-inspired computation have impacted multiple fields and created opportunities for new applications. In recent years, these techniques have been increasingly integrated into robotic systems. Membrane Computing for Distributed Control of Robotic Swarms: Emerging Research and Opportunities is an innovative reference source for the latest perspectives on biologically-inspired computation techniques for robot design and control. Highlighting a range of pivotal topics such as software engineering, simulation tools, and robotic security, this book is ideally designed for researchers, academics, students, and practitioners interested in the role of membrane computing in mobile robots.},
author = {Florea, Andrei George and Buiu, Cătălin},
doi = {10.4018/978-1-5225-2280-5},
isbn = {9781522522805},
pages = {1--119},
publisher = {IGI Global},
series = {Advances in Computational Intelligence and Robotics},
subtitle = {Emerging Research and Opportunities},
title = {{Membrane Computing for Distributed Control of Robotic Swarms}},
url = {http://services.igi-global.com/resolvedoi/resolve.aspx?doi=10.4018/978-1-5225-2280-5},
year = {2017}
}

@article{Florea2016a,
abstract = {Recent theoretical advances and growing interest in the field of membrane computing have opened the way for more real-world applications of P systems and their variants. While there are some membrane computing simulators available, there are P systems variants that cannot be simulated and interfaced with special-purpose simulators (e.g., robot simulators) or real-world systems (e.g., mobile robots) yet. This paper proposes the first simulator for P colonies, an ongoing open source project developed in Python that allows the simulation of P colonies and P swarms, an extension of P colonies that we have introduced. A way to connect the generic P colony simulator with a robot simulator is provided together with a P colony to control the movement of a mobile robot.},
author = {Florea, Andrei George and Buiu, Cătălin},
file = {:D\:/jarak/Documents/Mendeley Desktop/Florea, Buiu - 2016 - Development of a software simulator for P colonies—Applications in robotics.pdf:pdf},
issn = {15487202},
journal = {International Journal of Unconventional Computing},
keywords = {Kilobot,Membrane computing,Open-source,P colonies,P systems,Python,Robotics,Software engineering},
number = {2-3},
pages = {189--205},
title = {{Development of a software simulator for P colonies — Applications in robotics}},
volume = {12},
year = {2016}
}

@article{Raghavan2020a,
abstract = {P System or Membrane Computing is an unconventional and natural computing model inspired by the functioning of a living cell. This model has an inherently parallel structure. There are several variants of P System developed, each of which has a different application. One of the variants, Enzymatic Numerical P System (ENPS), has primarily been developed to be used with numerical values (as in economics) and thus has vast applications. For realizing ENPS there are several tools available, primarily based on Java and Python, each of which has a different input format. Currently, there is no tool which allows the user to execute ENPS using both the simulators on the same platform, the issue being inter-conversion between input formats, namely, XML and PeP (specific format designed for Python based ENPS). Another major issue with existing simulators is their inability to allow multiple membrane systems to be executed and there is no facility for interconnection between two membrane systems. A tool developed here solves both problems namely, file inter-conversion and multiple membrane support by transferring dependent variable values automatically according to users' choice. The tool is developed using Python 3.0 and has only a few dependencies. The tool is tested under different scenarios and the results confirm the correctness of the tool.},
author = {Raghavan, S. and Gangadhar, Yashas and Pattar, Varun and Chandrasekaran, K.},
doi = {10.1016/j.biosystems.2019.104067},
file = {:D\:/jarak/Documents/Mendeley Desktop/Raghavan et al. - 2020 - Multi-ENPS simulator support tool with automatic file inter-conversion and multi-membrane execution.pdf:pdf},
issn = {18728324},
journal = {BioSystems},
keywords = {ENPS tool,Enzymatic Numerical P System,Multi-membrane,P System},
month = {3},
number = {October 2019},
pages = {104067},
% pmid = {31712063},
% publisher = {Elsevier},
title = {{Multi-ENPS simulator support tool with automatic file inter-conversion and multi-membrane execution}},
url = {https://doi.org/10.1016/j.biosystems.2019.104067 https://linkinghub.elsevier.com/retrieve/pii/S0303264719302278},
volume = {189},
year = {2020}
}

@article{Valencia-Cabrera2019,
abstract = {As with any fast-emerging research front in computer science, the proliferation of theoretical and practical results within Membrane computing since its appearance in 1998 was astonishing. As a consequence, it became necessary during the subsequent years to produce several surveys collecting the main achievements from a theoretical point of view, along with some specific surveys about simulation tools for this paradigm. As the discipline has reached a certain degree of maturity, more practical applications have arisen, and new collective works are summarising the new software products appeared. However, while these recapitulation efforts remain useful for details about new simulators, they cannot act as exhaustive updated listings, as they become obsolete as soon as new tools are developed. Thus, we considered that it was necessary to provide an interactive tool showing an updated timeline (https://www.gcn.us.es/SimulationMC) about the simulation of the computational devices of membrane computing (a.k.a P systems), aiming to stay updated whenever any new practical work comes out in the discipline. This paper recalls the main stages and milestones within the evolution of simulation tools for different types and variants of P systems, along with their main related applications. In addition, it describes the interactive web tool with the timeline mentioned, where all the references related here have been incorporated. Unlike other survey papers, it is the intent of this work to reinforce this initial collective effort with the web endpoint kept alive and updated.},
author = {Valencia-Cabrera, Luis and Orellana-Mart{\'{i}}n, David and Mart{\'{i}}nez-del-Amor, Miguel {\'{A}}ngel and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.1007/s41965-019-00016-z},
file = {:D\:/jarak/Documents/Mendeley Desktop/Valencia-Cabrera et al. - 2019 - An interactive timeline of simulators in membrane computing Depicting two decades of evolution in the s.pdf:pdf},
% isbn = {0123456789},
issn = {25238914},
journal = {Journal of Membrane Computing},
keywords = {Computational modelling,Membrane computing,Simulation tools,Survey},
month = {9},
number = {3},
pages = {209--222},
% publisher = {Springer Singapore},
subtitle = {{Depicting two decades of evolution in the simulation of P systems}},
title = {{An interactive timeline of simulators in membrane computing}},
url = {https://doi.org/10.1007/s41965-019-00016-z http://link.springer.com/10.1007/s41965-019-00016-z},
volume = {1},
year = {2019}
}

@inbook{Gutierrez-Naranjo2007,
abstract = {The simulation of a P system with current computers is a quite complex task. P systems are intrinsically non deterministic computational devices and therefore their computation trees are difficult to store and handle with one-processor (or bounded number of processors) computers. Nevertheless, there exists a first generation of simulators which can be successfully used for pedagogical purposes and also as assistant tools for researchers. This paper summarizes one of these simulators, presenting the state-of-the-art of the available software for simulating (different variants of) cell-like P systems.},
address = {Berlin, Heidelberg},
author = {Guti{\'{e}}rrez-Naranjo, Miguel Angel and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n},
booktitle = {Applications of Membrane Computing},
chapter = {15},
doi = {10.1007/3-540-29937-8_15},
editor = {Ciobanu, Gabriel and P{\u a}un, {\relax Gh}eorghe and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
file = {:D\:/jarak/Documents/Mendeley Desktop/Guti{\'{e}}rrez-Naranjo, P{\'{e}}rez-Jim{\'{e}}nez, Riscos-N{\'{u}}{\~{n}}ez - 2007 - Available Membrane Computing Software.pdf:pdf},
isbn = {978-3-540-29937-0},
pages = {411--436},
publisher = {Springer Berlin Heidelberg},
title = {{Available Membrane Computing Software}},
url = {http://link.springer.com/10.1007/3-540-29937-8_15},
year = {2007}
}

% @incollection{Ciobanu2004,
@inbook{Ciobanu2004,
abstract = {The paper presents a parallel implementation of the membrane systems. We implement the simplest variant of P systems, which however defines the essential features of the membrane systems, and acts as a framework for other variants of P systems with advanced functionalities. The mechanisms used in this implementation could be easily adapted to other versions of P systems with minor changes. The implementation is designed for a cluster of computers; it is written in C++ and it makes use of Message Passing Interface as its communication mechanism. {\textcopyright} Springer-Verlag Berlin Heidelberg 2004.},
address = {Berlin, Heidelberg},
author = {Ciobanu, Gabriel and Wenyuan, Guo},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-540-24619-0_9},
editor = {Mart{\'{i}}n-Vide, Carlos and Mauri, Giancarlo and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D\:/jarak/Documents/Mendeley Desktop/Ciobanu, Wenyuan - 2004 - P Systems Running on a Cluster of Computers.pdf:pdf},
isbn = {978-3-540-24619-0},
% issn = {16113349},
pages = {123--139},
publisher = {Springer Berlin Heidelberg},
title = {{P Systems Running on a Cluster of Computers}},
url = {http://link.springer.com/10.1007/978-3-540-24619-0_9},
volume = {2933},
year = {2004}
}

@inproceedings{Nicolescu2012,
abstract = {Our group's recent quest has been to use P systems to model parallel and distributed algorithms. Several framework extensions are recalled or detailed, in particular, modular composition with information hiding, complex symbols, generic rules, reified cell IDs, asynchronous operational modes, asynchronous complexity. We motivate our proposals via P system models of several well-known distributed algorithms, such as leader election and distributed echo. As another type of application, we mention a dynamic programming algorithm for stereo matching in image processing. We suggest criteria to assess the merits of this modelling approach and offer preliminary evaluations of our proposed additional ingredients, which have been useful in refactoring existing systems and could be useful to the larger P systems community.},
address = {Berlin, Heidelberg},
author = {Nicolescu, Radu},
booktitle = {Membrane Computing},
doi = {10.1007/978-3-642-28024-5_4},
editor = {Gheorghe, Marian and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto and Verlan, Sergey},
file = {:D\:/jarak/Documents/Mendeley Desktop/Nicolescu - 2012 - Parallel and Distributed Algorithms in P Systems.pdf:pdf},
isbn = {978-3-642-28024-5},
% issn = {03029743},
keywords = {P modules,P systems,asynchronous networks,cP systems,cell IDs,complex symbols,distributed algorithms,distributed echo,generic rules,leader election,parallel algorithms,stereo matching,synchronous networks},
pages = {35--50},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
title = {{Parallel and Distributed Algorithms in P Systems}},
url = {http://link.springer.com/10.1007/978-3-642-28024-5_4},
volume = {7184},
year = {2012}
}

% @inproceedings{Nicolescu2012,
% abstract = {Our group's recent quest has been to use P systems to model parallel and distributed algorithms. Several framework extensions are recalled or detailed, in particular, modular composition with information hiding, complex symbols, generic rules, reified cell IDs, asynchronous operational modes, asynchronous complexity. We motivate our proposals via P system models of several well-known distributed algorithms, such as leader election and distributed echo. As another type of application, we mention a dynamic programming algorithm for stereo matching in image processing. We suggest criteria to assess the merits of this modelling approach and offer preliminary evaluations of our proposed additional ingredients, which have been useful in refactoring existing systems and could be useful to the larger P systems community.},
% address = {Berlin, Heidelberg},
% author = {Nicolescu, Radu},
% booktitle = {Membrane Computing},
% doi = {10.1007/978-3-642-28024-5_4},
% editor = {Gheorghe, Marian and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto and Verlan, Sergey},
% file = {:D\:/jarak/Documents/Mendeley Desktop/Nicolescu - 2012 - Parallel and Distributed Algorithms in P Systems.pdf:pdf},
% isbn = {978-3-642-28024-5},
% keywords = {P modules,P systems,asynchronous networks,cell IDs,complex symbols,distributed algorithms,distributed echo,generic rules,leader election,parallel algorithms,stereo matching,synchronous networks},
% pages = {35--50},
% publisher = {Springer Berlin Heidelberg},
% series = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
% title = {{Parallel and Distributed Algorithms in P Systems}},
% url = {http://link.springer.com/10.1007/978-3-642-28024-5_4},
% volume = {7184 LNCS},
% year = {2012}
% }

@article{Balanescu2011,
abstract = {In this paper, the authors propose a new approach to fully asynchronous P systems, and a matching complexity measure, both inspired from the field of distributed algorithms. The authors validate the proposed approach by implementing several well-known distributed depth-first search (DFS) and breadth-first search (BFS) algorithms. Empirical results show that the proposed P algorithms have shorter descriptions and achieve a performance comparable to the corresponding distributed algorithms.},
author = {Bălănescu, Tudor and Nicolescu, Radu and Wu, Huiling},
doi = {10.4018/jncr.2011040101},
file = {:D\:/jarak/Documents/Mendeley Desktop/Balanescu, Nicolescu, Wu - 2011 - Asynchronous P Systems.pdf:pdf},
% isbn = {9781466642553},
issn = {1947-928X},
journal = {International Journal of Natural Computing Research},
keywords = {asynchronous,breadth-first search,cP systems,depth-first search,distributed,p systems,synchronous},
month = {4},
number = {2},
pages = {1--18},
title = {{Asynchronous P Systems}},
url = {http://services.igi-global.com/resolvedoi/resolve.aspx?doi=10.4018/jncr.2011040101},
volume = {2},
year = {2011}
}
% @article{Balanescu2011,
% abstract = {In this paper, the authors propose a new approach to fully asynchronous P systems, and a matching complexity measure, both inspired from the field of distributed algorithms. The authors validate the proposed approach by implementing several well-known distributed depth-first search (DFS) and breadth-first search (BFS) algorithms. Empirical results show that the proposed P algorithms have shorter descriptions and achieve a performance comparable to the corresponding distributed algorithms.},
% author = {Balanescu, Tudor and Nicolescu, Radu and Wu, Huiling},
% doi = {10.4018/jncr.2011040101},
% file = {:D\:/jarak/Documents/Mendeley Desktop/Balanescu, Nicolescu, Wu - 2011 - Asynchronous P Systems.pdf:pdf},
% issn = {1947-928X},
% journal = {International Journal of Natural Computing Research},
% keywords = {asynchronous,breadth-first search,depth-first search,distributed,p systems,synchronous},
% month = {4},
% number = {2},
% pages = {1--18},
% title = {{Asynchronous P Systems}},
% url =  {http://services.igi-global.com/resolvedoi/resolve.aspx?doi=10.4018/jncr.2011040101},
% volume = {2},
% year = {2011}
% }

@article{Liu2021a,
abstract = {P systems are widely used to solve computationally hard problems. In this study, we formally verify cP systems (P systems with complex objects) in the Coq proof assistant, and provide a corresponding open source library. To help transform cP notation into Gallina, we propose two sets of modelling guidelines. Comparing to existing P system formal verification studies, our approach shows many advantages and has great potential. To the best of our knowledge, this is the first study to formally verify membrane computing models using an interactive theorem prover.},
author = {Liu, Yezhou and Nicolescu, Radu and Sun, Jing},
doi = {10.1007/s41965-021-00080-4},
file = {:D\:/jarak/Documents/Mendeley Desktop/Liu, Nicolescu, Sun - 2021 - Formal verification of cP systems using Coq.pdf:pdf},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Coq,Formal verification,Membrane computing,P systems,Theorem prover,cP systems,coq,cp systems,formal verification,membrane computing,p systems,theorem prover},
month = {9},
number = {3},
pages = {205--220},
% publisher = {Springer Singapore},
title = {{Formal verification of cP systems using Coq}},
url = {https://doi.org/10.1007/s41965-021-00080-4 https://link.springer.com/10.1007/s41965-021-00080-4},
volume = {3},
year = {2021}
}

@article{Henderson2021,
author = {Henderson, Alec and Nicolescu, Radu and Dinneen, Michael J. and Chan, T. N. and Happe, Hendrik and Hinze, Thomas},
doi = {10.1007/s41965-021-00081-3},
file = {:D\:/jarak/Documents/Mendeley Desktop/Henderson et al. - 2021 - Turing completeness of water computing.pdf:pdf},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Membrane systems,Water-based computing,cP systems,membrane systems,water-based computing},
month = {9},
number = {3},
pages = {182--193},
% publisher = {Springer Singapore},
title = {{Turing completeness of water computing}},
url = {https://doi.org/10.1007/s41965-021-00081-3 https://link.springer.com/10.1007/s41965-021-00081-3},
volume = {3},
year = {2021}
}

@inproceedings{Bianco2007,
abstract = {Metabolic P systems, shortly MP systems, are a special class of P systems, introduced for expressing biological metabolism. Their dynamics is computed by metabolic algorithms which transform populations of objects according to a mass partition principle, based on suitable generalizations of chemical laws. The basic principles of MP systems are discussed and PsIm, a simulation tool we developed in this context to discretely compute systems dynamics, is highlighted in its basic features. A concrete example is reported as well including a real simulation experiment by means of Psim. {\textcopyright} 2007 IEEE.},
author = {Bianco, Luca and Manca, Vincenzo and Marchetti, Luca and Petterlini, Michele},
booktitle = {2007 IEEE Congress on Evolutionary Computation},
doi = {10.1109/CEC.2007.4424563},
file = {:D\:/jarak/Documents/Mendeley Desktop/Bianco et al. - 2007 - Psim A simulator for biomolecular dynamics based on P systems.pdf:pdf},
isbn = {978-1-4244-1339-3},
month = {9},
pages = {883--887},
publisher = {IEEE},
title = {{Psim: a simulator for biomolecular dynamics based on P systems}},
url = {http://ieeexplore.ieee.org/document/4424563/},
year = {2007}
}

@incollection{Bianco2007a,
abstract = {Although born as unconventional models of computation, P systems can be conveniently adopted as modeling frameworks for biological systems simulations. This choice brings with it the advantage of producing easier to be devised and understood models than with other formalisms. Nevertheless, the employment of P systems for modeling purposes demands biologically meaningful evolution strategies as well as complete computational tools to run simulations on. In previous papers a strategy of evolution known as the metabolic algorithm has been presented; here a simulation tool called Psim (current version 2.4) is discussed and a case study of its application is also given. {\textcopyright} Springer-Verlag Berlin Heidelberg 2007.},
address = {Berlin, Heidelberg},
author = {Bianco, Luca and Castellini, Alberto},
booktitle = {Membrane Computing},
doi = {10.1007/978-3-540-77312-2_1},
editor = {Eleftherakis, George and Kefalas, Petros and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D\:/jarak/Documents/Mendeley Desktop/Bianco, Castellini - 2007 - Psim A Computational Platform for Metabolic P Systems.pdf:pdf},
isbn = {3540773118},
% issn = {16113349},
pages = {1--20},
publisher = {Springer Berlin Heidelberg},
title = {{Psim: A Computational Platform for Metabolic P Systems}},
url = {http://link.springer.com/10.1007/978-3-540-77312-2_1},
volume = {4860},
year = {2007}
}

@incollection{Raghavan2016,
abstract = {Membrane Computing comes under the field of Natural Computing. This was introduced by Gheorghe Păun. This field has been there from a decade. To realize Membrane Computing it is important to have tools that can be used either to process or simulate membrane computing. There have been several attempts in this area. This paper is an attempt to provide the details of the tools that are available for membrane computing. Primarily the tools are classified into two components. On one hand we have tools that are being used for specific type of P Systems or the tools which have a specific application. On the other hand there are tools which are comparatively generic in nature. Further this paper lists the tools that have been designed and developed to be used for the biological applications of P Systems. After classification, a brief description of the tools is given in this paper. Finally a brief quantitative analysis of the tools is done. Though there have been few surveys of P System tools, this is a slightly different paper which tries to classify and tries to a give review of the tools.},
author = {Raghavan, S. and Chandrasekaran, K.},
booktitle = {Bio-inspired Computing – Theories and Applications},
doi = {10.1007/978-981-10-3611-8_23},
editor = {Gong, Maoguo and Pan, Linqiang and Song, Tao and Zhang, Gexiang},
file = {:D\:/jarak/Documents/Mendeley Desktop/Raghavan, Chandrasekaran - 2016 - Tools and Simulators for Membrane Computing-A Literature Review.pdf:pdf},
isbn = {9789811036101},
% issn = {18650929},
keywords = {Membrane computing tools,P system simulators,P system tools,P systems},
pages = {249--277},
publisher = {Springer Singapore},
series = {Communications in Computer and Information Science},
title = {{Tools and Simulators for Membrane Computing-A Literature Review}},
url = {http://link.springer.com/10.1007/978-981-10-3611-8 http://link.springer.com/10.1007/978-981-10-3611-8_23},
volume = {681},
year = {2016}
}

@inproceedings{NepomucenoChamorro2005,
abstract = {In this paper we present a software tool to represent P systems modelling signalling networks of biochemical reactions using SBML (Systems Biology Markup Language), a machine-readable format for describing qualitative and quantitative models of biochemical networks. CLIPS (C Language Integrated Production System), a tool which provides a complete environment for the construction of rule and/or object based expert systems, has been used to simulated membrane system. Our tool acts as a translator from SBML to CLIPS; that is, besides providing an environment for writing SBML code it also parses this code and generates automatically the CLIPS code that simulates the membrane system represented in SBML.},
address = {Seville, Spain},
author = {{Nepomuceno Chamorro}, Isabel {de los {\'{A}}ngeles} and {Nepomuceno Chamorro}, Juan Antonio and Romero-Campero, Francisco Jos{\'{e}}},
booktitle = {Proceedings of the Third Brainstorming Week on Membrane Computing},
file = {:D\:/jarak/Documents/Mendeley Desktop/Nepomuceno Chamorro, Nepomuceno Chamorro, Romero-Campero - 2005 - A Tool for Using the SBML Format to Represent P Systems which Model Bi.pdf:pdf},
isbn = {84-609-6771-9},
month = {2},
pages = {219--228},
publisher = {F{\'{e}}nix Editora},
title = {{A Tool for Using the SBML Format to Represent P Systems which Model Biological Reaction Networks}},
url = {http://hdl.handle.net/11441/36787},
year = {2005}
}

@inproceedings{Bonchis2005,
abstract = {In this paper we present an open-source web-enabled simulator for P sys- tems. We use CLIPS embedded in C, and make the simulator available as a web application, complemented by a query language to specify the results.},
address = {Seville, Spain},
author = {Bonchis, Cosmin and Izbasa, Cornel and Petcu, Dana and Ciobanu, Gabriel},
booktitle = {Proceedings of the Third Brainstorming Week on Membrane Computing},
file = {:D\:/jarak/Documents/Mendeley Desktop/Bonchis et al. - 2005 - WebPS A web-based P system simulator with query facilities.pdf:pdf},
isbn = {84-609-6771-9},
month = {2},
pages = {63--72},
publisher = {F{\'{e}}nix Editora},
title = {{WebPS: A web-based P system simulator with query facilities}},
url = {http://hdl.handle.net/11441/36550},
year = {2005}
}

@inproceedings{Acampora2007,
abstract = {Membrane Computing (or P-System theory) is a recent area of Natural Computing, the field of computer science that works with computational techniques inspired by nature and natural systems. Particularly, Membrane computing investigates models of computation inspired by the structure and functioning of biological cells focusing attention on their distributed and parallel transformations. Different software applications which have been developed in imperative languages, like Java, or in declaratives languages, as Prolog, work in the framework of Membrane Computing systems. These applications simulate the behavior of P-System focusing on details about computational power of different Membrane devices without exploiting the distributed nature of simulated cellular structures. This paper presents a parallel and distributed application, based on Multi-Agent System technology, able to simulate Membrane Computing devices. The aim is to show how the theoretical distributed nature of P-Systems can be mapped into a real distributed Multi-Agent System in order to achieve two important goals: 1) to define a theoretical computational model for Multi-Agent System architectures; 2) to design a software application able to simulate Membrane Computing devices in a real fashion by exploiting the distributed nature of Multi-Agent System technology. {\textcopyright} 2007 IEEE.},
address = {Singapore},
author = {Acampora, Giovanni and Loia, Vincenzo},
booktitle = {2007 IEEE Congress on Evolutionary Computation},
doi = {10.1109/CEC.2007.4425006},
file = {:D\:/jarak/Documents/Mendeley Desktop/Acampora, Loia - 2007 - A proposal of multi-agent simulation system for membrane computing devices.pdf:pdf},
isbn = {978-1-4244-1339-3},
month = {9},
pages = {4100--4107},
publisher = {IEEE},
title = {{A proposal of multi-agent simulation system for membrane computing devices}},
url = {http://ieeexplore.ieee.org/document/4425006/},
year = {2007}
}

@inproceedings{Diaz-Pernil2008a,
abstract = {Software development for cellular computing has already been addressed, yielding a first generation of applications. In this paper, we develop a new programming language: P-Lingua. Furthermore, we present a simulator for the class of recognizing P systems with active membranes. We illustrate it by giving a solution to the SAT problem as an example.},
address = {Seville, Spain},
author = {D{\'{i}}az-Pernil, Daniel and P{\'{e}}rez-Hurtado, Ignacio and P{\'{e}}rez-Jim{\'{e}}nez, Mario J and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n},
booktitle = {Proceedings of the Sixth Brainstorming Week on Membrane Computing},
file = {:D\:/jarak/Documents/Mendeley Desktop/D{\'{i}}az-Pernil et al. - 2008 - P-Lingua A programming language for membrane computing.pdf:pdf},
isbn = {9788461244294},
month = {2},
pages = {135--155},
publisher = {F{\'{e}}nix Editora},
title = {{P-Lingua: A programming language for membrane computing}},
url = {http://hdl.handle.net/11441/38713},
year = {2008}
}

@incollection{Garcia-Quismondo2010,
abstract = {P-Lingua is a programming language for membrane computing which aims to be a standard to define P systems. In order to implement this idea, a Java library called pLinguaCore has been developed as a software framework for cell-like P systems. It is able to handle input files (either in XML or in P-Lingua format) defining P systems from a number of different cell-like P system models. Moreover, the library includes several built-in simulators for each supported model. For the sake of software portability, pLinguaCore can export a P system definition to any convenient output format (currently XML and binary formats are available). This software is not a closed product, but it can be extended to accept new input or output formats and also new models or simulators. The term P-Lingua 2.0 refers to the software package consisting of the above mentioned library together with a user interface called pLinguaPlugin (more details can be found at http://www.p-lingua.org). Finally, in order to illustrate the software, this paper includes an application using pLinguaCore for describing and simulating ecosystems by means of P systems. {\textcopyright} 2010 Springer-Verlag.},
author = {Garc{\'{i}}a-Quismondo, Manuel and Guti{\'{e}}rrez-Escudero, Rosa and P{\'{e}}rez-Hurtado, Ignacio and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-11467-0_20},
editor = {P{\u a}un, {\relax Gh}eorghe and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D\:/jarak/Documents/Mendeley Desktop/Garc{\'{i}}a-Quismondo et al. - 2010 - An Overview of P-Lingua 2.0.pdf:pdf},
isbn = {3642114660},
% issn = {03029743},
pages = {264--288},
publisher = {Springer Berlin Heidelberg},
title = {{An Overview of P-Lingua 2.0}},
url = {http://link.springer.com/10.1007/978-3-642-11467-0_20},
volume = {5957},
year = {2010}
}

@inproceedings{Cooper2020,
abstract = {Stereo Matching (SM) is a sub-field of computer vision whichis heavily used in enabling automated depth estimation. Belief Propaga-tion (BP) is an algorithm used in SM, which is characterised by a highnumber of messages exchanged between logical processing elements. Eachprocessing element can operate in parallel with all others, and thus is aclear potential fit for P systems, as with many other computer visionand image processing tasks. This paper provides a brief background toSM and BP, and describes a cP systems implementation of BP that wasdesigned both to be relatively efficient, but also relatively easy to un-derstand for those versed in cP systems. The paper provides a workedpartial example, and concludes with a brief analysis of the system.},
address = {Vienna, Austria},
author = {Cooper, James and Nicolescu, Radu},
booktitle = {Pre-proceedings of the International Conference on Membrane Computing 2020},
editor = {Freund, Rudolf and Ishdorj, Tseren-Onolt},
keywords = {cP systems},
month = {8},
pages = {1--28},
publisher = {TU Wien},
title = {{Belief Propagation for Stereo Matching in cP systems}},
year = {2020}
}

% TSP Comparison

@article{Orellana-Martin2019a,
abstract = {The search for new mechanisms and tools allowing us to tackle the famous P versus NP problem from new perspectives is an important task, due to the relevance of that problem. The concept of efficiency of computing models is associated with the ability to solve intractable (in a classical sense) problems in polynomial time. Assuming that P≠NP, that concept is equivalent to the capability to solve NP-complete problems in an efficient way. Different frontiers of the efficiency have been given in Membrane Computing in terms of syntactical or semantic ingredients of the models. In particular, in the framework of tissue P systems with cell division using symport/antiport rules, the length of communication rules (passing from length 1 to length 2) provides an optimal borderline of the efficiency. Cell-like P systems with symport/antiport rules and membrane division is a restricted variant of such tissue P systems in both its structure (rooted tree versus undirected graph) and in the way membranes communicate with each other and with the environment. The limitations of efficient computations in such kind of P systems which use non-cooperative communication rules have been previously established. In this paper, a uniform polynomial time solution for the Hamiltonian cycle problem, a well known NP-complete problem, by means of cell-like P systems with membrane division using minimal cooperation in communication rules (at most two objects are involved), is provided. Hence, a new optimal boundary between tractability and NP-hardness, is provided: passing from non-cooperative rules to cooperative rules in cell-like P systems with symport/antiport rules and membrane division amounts to passing from non-efficiency to efficiency.},
author = {Orellana-Mart{\'{i}}n, David and Valencia-Cabrera, Luis and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.1016/j.tcs.2018.12.024},
file = {:D\:/jarak/Documents/Mendeley Desktop/Orellana-Mart{\'{i}}n et al. - 2019 - A path to computational efficiency through membrane computing.pdf:pdf},
issn = {03043975},
journal = {Theoretical Computer Science},
keywords = {Computational complexity,Membrane computing,Membrane division,P system with symport/antiport},
month = {7},
pages = {443--453},
% publisher = {Elsevier B.V.},
title = {{A path to computational efficiency through membrane computing}},
url = {https://doi.org/10.1016/j.tcs.2018.12.024 https://linkinghub.elsevier.com/retrieve/pii/S0304397519300027},
volume = {777},
year = {2019}
}

@article{Aman2021,
abstract = {We define tissue P systems with costs assigning execution costs to the synapses that are used to transport the objects between cells. We use the Priced-Timed Maude rewriting engine to provide an implementation of tissue P systems with costs. The implementation allows us to analyze and verify some behavioural aspects of tissue P systems with costs. We illustrate an application of these tissue P systems with costs by providing a solution to the Travelling Salesman Problem.},
author = {Aman, Bogdan and Ciobanu, Gabriel},
doi = {10.1007/s41965-021-00077-z},
file = {:D\:/jarak/Documents/Mendeley Desktop/Aman, Ciobanu - 2021 - Travelling salesman problem in tissue P systems with costs.pdf:pdf},
% isbn = {0123456789},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Membrane computing,Rewriting engine (Priced-Timed) Maude,Travelling salesman problem},
month = {6},
number = {2},
pages = {97--104},
% publisher = {Springer Singapore},
title = {{Travelling salesman problem in tissue P systems with costs}},
url = {https://doi.org/10.1007/s41965-021-00077-z https://link.springer.com/10.1007/s41965-021-00077-z},
volume = {3},
year = {2021}
}

@incollection{Qi2018,
abstract = {Spiking neural P systems are a class of distributed and parallel computing models that incorporate the idea of spiking neurons into P systems. Membrane computing (MC) combining with evolutionary computing (EC) is called evolutionary MC. In this work, we will combine SNPS with heuristic algorithm to solve the travelling salesman problem. To this aim, an extended spiking neural P system (ESNPS) has been proposed. A certain number of ESNPS can be organized into OSNPS. Extensive experiments on TSP have been reported to experimentally prove the viability and effectiveness of the proposed neural system.},
author = {Qi, Feng and Liu, Mengmeng},
booktitle = {Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST},
doi = {10.1007/978-3-319-73447-7_71},
editor = {Gu, Xuemaiand Liu, Gongliang and Li, Bo},
file = {:D\:/jarak/Documents/Mendeley Desktop/Qi, Liu - 2018 - Optimization Spiking Neural P System for Solving TSP.pdf:pdf},
isbn = {9783319734460},
% issn = {18678211},
keywords = {GA,Membrane algorithm,OSNPS,TSP},
pages = {668--676},
title = {{Optimization Spiking Neural P System for Solving TSP}},
url = {http://link.springer.com/10.1007/978-3-319-73447-7_71},
volume = {227},
year = {2018}
}

@incollection{Wei2019,
abstract = {Membrane computing is a class of distributed parallel computing model. In this paper, we propose a novel evolutionary computation method based on dynamic active membrane system. First, an improved particle swarm optimization based on neighborhood searching of every particle that called NPSO is proposed. That is, instead of learning from Pbest and Gbest during the whole evolution, the proposed NPSO learns from Pbest and NPbest (the NPbest is selected by the Neighborhood Searching Based Learning Strategy) in the early stage to preserve swarm diversity. After the predefined number of iterations, the NPSO switches into the conventional global version PSO to accelerate convergence speed. Second, in order to avoid suffering from premature convergence in the early stage, NPSO is partitioned into two stages that in the first stage is to preserve swarm diversity and in the second stage is to enhance the convergence speed towards global optimum. The classic Traveling Salesman Problem (TSP) is one of the most significant stochastic routing problems so we use the proposed NPSO to solve it. In fact, the NPSO can achieve better balance between exploration and exploitation as well. Experimental results show that the proposed NPSO algorithm is more superior or competitive.},
author = {Wei, Yanmeng and Liu, Xiyu},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-030-15093-8_39},
editor = {Li, Shijian},
file = {:D\:/jarak/Documents/Mendeley Desktop/Wei, Liu - 2019 - A Novel PSO Algorithm for Traveling Salesman Problem Based on Dynamic Membrane System.pdf:pdf},
isbn = {9783030150921},
% issn = {16113349},
keywords = {Membrane computing,Particle swarm optimization algorithm,TSP},
pages = {506--515},
publisher = {Springer International Publishing},
title = {{A Novel PSO Algorithm for Traveling Salesman Problem Based on Dynamic Membrane System}},
url = {http://dx.doi.org/10.1007/978-3-030-15093-8_39 http://link.springer.com/10.1007/978-3-030-15093-8_39},
volume = {11204},
year = {2019}
}

@incollection{Zhang2019,
abstract = {The Spiking Neural P system is a branch of the neuronal-like P system in the membrane system with great parallelism. However, The Travelling Salesman Problem is a long-term NP-hard problem that finds the minimum costly Hamiltonian cycles in a weighted undirected graph. In this paper, we use the rules of division and dissolution of spiking neurons, combined with the idea of point-by-point traversal, we find all Hamiltonian cycles in weighted undirected graphs. Then computing by the binary form of the spike, resulting in the minimum cost Hamiltonian cycles. A bi-directional weighted digraph is applied to prove the feasibility of the algorithm in this paper. This method takes full advantage of the great parallelism of the SN P system, using fewer neurons and simpler rules and procedures to solve Travelling Salesman Problem.},
author = {Zhang, Hui and Xiang, Laisheng and Liu, Xiyu},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-030-15127-0_33},
editor = {Tang, Yong and Zu, Qiaohong and Rodr{\'i}guez Garc{\'i}a, Jos{\'e} G.},
file = {:D\:/jarak/Documents/Mendeley Desktop/Zhang, Xiang, Liu - 2019 - A SN P System for Travelling Salesman Problem.pdf:pdf},
isbn = {9783030151263},
% issn = {16113349},
keywords = {Hamiltonian cycles,Neurons division,Spiking Neural P system,Travelling Salesman Problem},
pages = {339--346},
publisher = {Springer International Publishing},
title = {{A SN P System for Travelling Salesman Problem}},
url = {http://dx.doi.org/10.1007/978-3-030-15127-0_33 http://link.springer.com/10.1007/978-3-030-15127-0_33},
volume = {11354},
year = {2019}
}


% GCol Comparison

@article{Niu2016,
abstract = {In most of traditional P systems, each rule has the same execution time. That way of using the rules is not quite realistic from a biological point of view, because external conditions always change in an unpredicted manner such that different reaction may take different time to execute. In this work, we investigate the computation efficiency of tissue P systems by removing the restriction that each rule should complete in one time unit. The timed tissue P system is constructed by adding a time mapping to the rules to specify the execution time for each rule. A uniform and time-free solution to 3-coloring problem is proposed, where the execution time of the computational processes involved can vary arbitrarily and the output produced is always the same.},
author = {Niu, Yunyun and Xiao, Jianhua and Jiang, Yun},
doi = {10.1049/cje.2016.05.003},
file = {:D\:/jarak/Documents/Mendeley Desktop/Niu, Xiao, Jiang - 2016 - Time‐Free Solution to 3‐Coloring Problem Using Tissue P Systems.pdf:pdf},
issn = {1022-4653},
journal = {Chinese Journal of Electronics},
keywords = {3-coloring problem,Membrane computing,Time-free solution,Tissue P system},
month = {5},
number = {3},
pages = {407--412},
title = {{Time‐Free Solution to 3‐Coloring Problem Using Tissue P Systems}},
url = {https://onlinelibrary.wiley.com/doi/10.1049/cje.2016.05.003},
volume = {25},
year = {2016}
}
@inproceedings{Wang2009,
abstract = {Tissue P systems are a class of distributed and parallel computing models inspired by intercellular communication and cooperation between neurons. An interesting variant of tissue P systems is known as tissue P systems with cell separation, which is endowed with the ability of generating an exponential workspace in a linear time and in this way getting the possibility to solve computationally hard problems in polynomial time. In this paper, a uniform solution to 3-coloring problem by tissue P systems with cell separation is presented, which is linear in terms of the number of vertices and the number of edges. {\textcopyright}2009 IEEE.},
author = {Wang, Shuo and Miao, Zhengke and Shi, Xiaolong and Zhang, Zheng},
booktitle = {2009 Fourth International on Conference on Bio-Inspired Computing},
doi = {10.1109/BICTA.2009.5338122},
file = {:D\:/jarak/Documents/Mendeley Desktop/Wang et al. - 2009 - Solving 3-coloring problem by tissue P systems with cell separation.pdf:pdf},
isbn = {978-1-4244-3866-2},
month = {10},
pages = {1--6},
publisher = {IEEE},
title = {{Solving 3-coloring problem by tissue P systems with cell separation}},
url = {http://ieeexplore.ieee.org/document/5338122/},
year = {2009}
}
@article{Christinal2018,
abstract = {A new variant of tissue P systems called tissue P system with protein on cells is used in this paper. It has the ability to move proteins between cells. It is inspired from the biology that the cells communicate by sending and receiving signals. Signals most often move through the cell by passing from protein to protein. In tissue P systems with protein on cells, multisets of objects together with proteins between cells are exchanged. We present in this paper a linear solution of the 3-coloring problem, a well known NP-complete problem.},
author = {Christinal, A. Hepzibah and D{\'{i}}az-Pernil, Daniel and Mathu, T.},
doi = {10.1007/s11047-016-9590-1},
file = {:D\:/jarak/Documents/Mendeley Desktop/Christinal, D{\'{i}}az-Pernil, Mathu - 2018 - A uniform family of tissue P systems with protein on cells solving 3-coloring in linear time.pdf:pdf},
% isbn = {9783319218199},
issn = {15729796},
journal = {Natural Computing},
keywords = {3-Coloring problem,Membrane computing,Protein on cells,Tissue P system},
month = {6},
number = {2},
pages = {311--319},
title = {{A uniform family of tissue P systems with protein on cells solving 3-coloring in linear time}},
url = {http://link.springer.com/10.1007/s11047-016-9590-1},
volume = {17},
year = {2018}
}
@inproceedings{Turcanu2012,
abstract = {Membrane computing, the research field initiated by Gheorghe Paun in 1998, defines computational models, called P systems, inspired by the behavior and structure of the living cell. Many variants of P systems have been introduced and also used as formal modeling and verification tools. Recently, kernel P systems were introduced as an unifying framework for P systems, which integrates many features of existing P system variants into an elegant and yet powerful modeling formalism. In this paper, we consider a tissue P system with active membranes and a simple kernel P system, both of them solving an NP-complete problem, the 3-colouring problem. In order to compare these two models, we determine, for both of them, the values of the variables corresponding to the colors in a number of particular cases using MeCoSim, a membrane computing simulator, and we deduce some of their nontrivial computational properties. The two models are also implemented in Event-B and properties are formally verified using the ProB model checker associated with the Rodin platform. {\textcopyright} 2012 IEEE.},
author = {Turcanu, Adrian and Ipate, Florentin},
booktitle = {2012 14th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing},
doi = {10.1109/SYNASC.2012.61},
file = {:D\:/jarak/Documents/Mendeley Desktop/Turcanu, Ipate - 2012 - Computational Properties of Two P Systems Solving the 3-colouring Problem.pdf:pdf},
isbn = {978-1-4673-5026-6},
keywords = {3-colouring problem,Event-B,P system,model checking},
month = {9},
pages = {62--69},
publisher = {IEEE},
title = {{Computational Properties of Two P Systems Solving the 3-colouring Problem}},
url = {http://ieeexplore.ieee.org/document/6481012/},
year = {2012}
}
@inproceedings{Tanaka2012,
abstract = {In the present paper, we consider fully asynchronous parallelism in membrane computing, and propose two asynchronous P systems for two graph coloring problems. We first propose an asynchronous P system that solves the k-coloring for a graph with n nodes, and show that the proposed P system works in O(knn2) sequential steps or O(n2) parallel steps using O(n2) kinds of objects. We next propose an asynchronous P system that solves the minimum graph coloring for a graph with n nodes, and show that the proposed P system works in O(nn+2) sequential steps or O(n2) parallel steps using O(n2) kinds of objects. {\textcopyright} 2012 IEEE.},
author = {Tanaka, Kohei and Fujiwara, Akihiro},
booktitle = {2012 Third International Conference on Networking and Computing},
doi = {10.1109/ICNC.2012.46},
file = {:D\:/jarak/Documents/Mendeley Desktop/Tanaka, Fujiwara - 2012 - Asynchronous P Systems for Graph Coloring Problems.pdf:pdf},
isbn = {978-1-4673-4624-5},
month = {12},
pages = {254--258},
publisher = {IEEE},
title = {{Asynchronous P Systems for Graph Coloring Problems}},
url = {http://ieeexplore.ieee.org/document/6424572/},
year = {2012}
}
@article{Andreu-Guzman2020,
abstract = {Graph coloring problem (GCP) is an NP-complete combinatorial optimization problem. Its computational complexity motivated many efforts to get approximate solutions through different meta-heuristics, such as several variants of evolutionary algorithms. On the other hand, membrane algorithms have appeared as alternative hybrid techniques merging together the structure and operators of membrane systems, along with the capabilities of optimization algorithms inside each membrane. This paper explores the ability of a new variants of one-level membrane systems using a recent variant of evolutionary algorithm dynamically using different genetic operators depending on the best fitness found. The experimental results presented show that this new algorithm, called DOGAPS, outperforms the dynamic evolutionary algorithm, with the extra value provided by the membrane system. Additionally, the role of some parameters involved in our algorithm are analyzed, including the number of membranes, iterations per membrane or mutation rate.},
author = {Andreu-Guzm{\'{a}}n, Jos{\'{e}} Antonio and Valencia-Cabrera, Luis},
doi = {10.1007/s41965-019-00026-x},
file = {:D\:/jarak/Documents/Mendeley Desktop/Andreu-Guzm{\'{a}}n, Valencia-Cabrera - 2020 - A novel solution for GCP based on an OLMS membrane algorithm with dynamic operators.pdf:pdf},
% isbn = {0123456789},
issn = {25238914},
journal = {Journal of Membrane Computing},
keywords = {Dynamic genetic operators,Graph coloring,Membrane algorithms,NP-hard problems},
month = {3},
number = {1},
pages = {1--13},
% publisher = {Springer Singapore},
title = {{A novel solution for GCP based on an OLMS membrane algorithm with dynamic operators}},
url = {https://doi.org/10.1007/s41965-019-00026-x http://link.springer.com/10.1007/s41965-019-00026-x},
volume = {2},
year = {2020}
}
@inproceedings{Umetsu2019,
abstract = {Membrane computing is a computational model based on activity of cells. Using the membrane computing, a number of computationally hard problems have been solved in a polynomial number of steps using an exponential number of membranes. However, the number of membranes denotes the number of cells from practical point of view, and the reduction of the number of membranes must be considered for using the membrane computing in real world. In this paper, we propose an asynchronous P system with branch and bound for reducing the number of membranes. In addition, we evaluate validity of the proposed P system using computational simulations. The experimental results show the validity and efficiency of the proposed P system with branch and bound.},
author = {Umetsu, Kotaro and Fujiwara, Akihiro},
booktitle = {2019 Seventh International Symposium on Computing and Networking Workshops (CANDARW)},
doi = {10.1109/CANDARW.2019.00049},
file = {:D\:/jarak/Documents/Mendeley Desktop/Umetsu, Fujiwara - 2019 - An Asynchronous P System Using Branch and Bound for Minimum Graph Coloring.pdf:pdf},
isbn = {978-1-7281-5268-4},
keywords = {Branch and bound,Graph coloring,Membrane computing},
month = {11},
pages = {242--248},
publisher = {IEEE},
title = {{An Asynchronous P System Using Branch and Bound for Minimum Graph Coloring}},
url = {https://ieeexplore.ieee.org/document/8951599/},
year = {2019}
}
@article{Diaz-Pernil2007,
abstract = {In the literature, several examples of the efficiency of cell-like P systems regarding the solution of NP-complete problems in polynomial time can be found (obviously, trading space for time). Recently, different new models of tissue-like P systems have received important attention from the scientific community. In this paper we present a linear-time solution to an NP-complete problem from graph theory, the 3-coloring problem, and we discuss the suitability of tissue-like P systems as a framework to address the efficient solution to intractable problems. {\textcopyright} 2007 Elsevier B.V. All rights reserved.},
author = {D{\'{i}}az-Pernil, Daniel and Guti{\'{e}}rrez-Naranjo, Miguel A. and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n},
doi = {10.1016/j.entcs.2007.05.009},
file = {:D\:/jarak/Documents/Mendeley Desktop/D{\'{i}}az-Pernil et al. - 2007 - A Linear-time Tissue P System Based Solution for the 3-coloring Problem.pdf:pdf},
issn = {15710661},
journal = {Electronic Notes in Theoretical Computer Science},
keywords = {3-coloring problem,Membrane Computing,Tissue P Systems,cell division},
month = {7},
number = {2 SPEC. ISS.},
pages = {81--93},
% publisher = {Elsevier B.V.},
title = {{A Linear-time Tissue P System Based Solution for the 3-coloring Problem}},
url = {http://dx.doi.org/10.1016/j.entcs.2007.05.009 https://linkinghub.elsevier.com/retrieve/pii/S1571066107002800},
volume = {171},
year = {2007}
}

@inproceedings{Mathu2015,
abstract = {A new variant of tissue P systems called tissue P system with protein on cells is used in this paper. It has the ability to move proteins between cells. It is inspired from the biology that the cells communicate by sending and receiving signals. Signals most often move through the cell by passing from protein to protein. In tissue P systems with protein on cells, multisets of objects together with proteins between cells are exchanged. We present in this paper a linear solution of the 3-coloring problem, a well known NP-complete problem. In this new variant, these objects called proteins are used to obtain a new solution where the number of rules is lesser than that appears in the original solution with tissue P systems. The number of steps to obtain the solution is lesser than the conventional tissue P system. This is a strong point when someone wants to implement a solution in a practical way.},
address = {Cham},
author = {Mathu, T. and Christinal, A. Hepzibah and D{\'{i}}az-Pernil, Daniel},
booktitle = {Unconventional Computation and Natural Computation},
doi = {10.1007/978-3-319-21819-9_18},
editor = {Calude, Cristian S. and Dinneen, Michael J.},
file = {:D\:/jarak/Documents/Mendeley Desktop/Mathu, Christinal, D{\'{i}}az-Pernil - 2015 - A Uniform Family of Tissue P Systems with Protein on Cells Solving 3-Coloring in Linear Time.pdf:pdf},
isbn = {978-3-319-21819-9},
% issn = {16113349},
keywords = {3-Coloring problem,Membrane computing,Protein on cells,Tissue P system},
month = {6},
number = {2},
pages = {239--249},
publisher = {Springer International Publishing},
series = {Lecture Notes in Computer Science},
title = {{A Uniform Family of Tissue P Systems with Protein on Cells Solving 3-Coloring in Linear Time}},
url = {http://link.springer.com/10.1007/978-3-319-21819-9_18},
volume = {9252},
year = {2015}
}

@software{Florea2018,
author = {Florea, Andrei George and Buiu, Cătălin},
month = {10},
subtitle = {{(Enzymatic) Numerical P System simulator}},
title = {{PeP}},
url = {https://github.com/andrei91ro/pep},
year = {2018},
}

@Inbook{Paun2006,
author="P{\u a}un, {\relax Gh}eorghe",
editor="Ciobanu, Gabriel
and P{\u a}un, {\relax Gh}eorghe
and P{\'e}rez-Jim{\'e}nez, Mario J.",
title="Introduction to Membrane Computing",
bookTitle="Applications of Membrane Computing",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--42",
abstract="This is a comprehensive (and friendly) introduction to membrane computing (MC), meant to offer both computer scientists and non-computer scientists an up-to-date overview of the field. That is why the set of notions introduced here is rather large, but the presentation is informal, without proofs and with rigorous definitions given only for the basic types of P systems --- symbol object P systems with multiset rewriting rules, systems with symport/antiport rules, systems with string objects, tissue-like P systems, and neural-like P systems. Besides a list of (biologically inspired or mathematically motivated) ingredients/features which can be used in systems of these types, we also mention a series of results, as well as a series of research trends and topics.",
isbn="978-3-540-29937-0",
doi="10.1007/3-540-29937-8_1",
url="https://doi.org/10.1007/3-540-29937-8_1"
}

@article{Duan2020,
abstract = {Ecosystem modelling based on membrane computing is emerging as a powerful way to study the dynamics of (real) ecological populations. These models, providing distributed parallel devices, have shown a great potential to imitate the rich features observed in the behaviour of species and their interactions and key elements to understand and model ecosystems. Compared with differential equations, membrane computing models, also known as P systems, can model more complex biological phenomena due to their modularity and their ability to enclose the evolution of different environments and simulate, in parallel, different interrelated processes. In this paper, a comprehensive survey of membrane computing models for ecosystems is given, taking a giant panda ecosystem as an example to assess the model performance. This work aims at modelling a number of species using P systems with different membrane structure types to predict the number of individuals depending on parameters such as reproductive rate, mortality rate, and involving processes as rescue or release. Firstly, the computing models are introduced conceptually, describing the main elements constituting the syntax of these systems and explaining the semantics of the rules involved. Next, various modelled species (including endangered animals, plants, and bacteria) are summarized, and some computer tools are presented. Then, a discussion follows on the use of P systems for ecosystem modelling. Finally, a case study on giant pandas in Chengdu Base is analysed, concluding that the study in this field by using PDP systems can provide a valuable tool to deepen into the knowledge about the evolution of the population. This could ultimately help in the decision-making processes of the managers of the ecosystem to increase the species diversity and modify the adaptability. Besides, the impacts of natural disasters on the population dynamics of the species should also be considered. The analysis performed throughout the paper has taken into consideration this fact in order to increase the reliability of the prospects making use of the models designed.},
author = {Duan, Yingying and Rong, Haina and Qi, Dunwu and Valencia-Cabrera, Luis and Zhang, Gexiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.1155/2020/1312824},
file = {:D\:/jarak/Documents/Mendeley Desktop/Duan et al. - 2020 - A Review of Membrane Computing Models for Complex Ecosystems and a Case Study on a Complex Giant Panda System.pdf:pdf},
issn = {1076-2787},
journal = {Complexity},
month = {9},
pages = {1--26},
title = {{A Review of Membrane Computing Models for Complex Ecosystems and a Case Study on a Complex Giant Panda System}},
url = {https://www.hindawi.com/journals/complexity/2020/1312824/},
volume = {2020},
year = {2020}
}

@article{Colomer2014,
abstract = {The potential and adaptive flexibility of population dynamic P-systems (PDP) to study population dynamics suggests that they may be suitable for modelling complex fluvial ecosystems, characterized by a composition of dynamic habitats with many variables that interact simultaneously. Using as a model a reservoir occupied by the zebra mussel Dreissena polymorpha, we designed a computational model based on P systems to study the population dynamics of larvae, in order to evaluate management actions to control or eradicate this invasive species. The population dynamics of this species was simulated under different scenarios ranging from the absence of water flow change to a weekly variation with different flow rates, to the actual hydrodynamic situation of an intermediate flow rate. Our results show that PDP models can be very useful tools to model complex, partially desynchronized, processes that work in parallel. This allows the study of complex hydroecological processes such as the one presented, where reproductive cycles, temperature and water dynamics are involved in the desynchronization of the population dynamics both, within areas and among them.The results obtained may be useful in the management of other reservoirs with similar hydrodynamic situations in which the presence of this invasive species has been documented.},
author = {Colomer, M. {\`{A}}ngels and Margalida, Antoni and Valencia, Lu{\'{i}}s and Palau, Antoni},
doi = {10.1016/j.ecocom.2014.09.006},
file = {:D\:/jarak/Documents/Mendeley Desktop/Colomer et al. - 2014 - Application of a computational model for complex fluvial ecosystems The population dynamics of zebra mussel Drei.pdf:pdf},
issn = {1476945X},
journal = {Ecological Complexity},
keywords = {Biological invasions,Hydroecological processes,Invasive species,Management actions,Population dynamic P-systems,Zebra mussel},
month = {12},
pages = {116--126},
title = {{Application of a computational model for complex fluvial ecosystems: The population dynamics of zebra mussel Dreissena polymorpha as a case study}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S1476945X14000981},
volume = {20},
year = {2014}
}
@article{Colomer2011,
abstract = {The models used for ecosystems modeling are generally based on differential equations. However, in recent years new computational models based on biological processes, or bioinspired models, have arisen, among which are P systems. These are inspired by the functions of cells and present important advantages with respect to traditional models, such as a high computational efficiency, modularity and their ability to work in parallel. They are simple, individual-based models that use biological parameters that can be obtained experimentally. In this work, we present the framework for a model based on P systems applied to the study of an ecosystem in which three avian scavengers (predators) interact with 10 wild and domestic ungulates (preys). The computation time for 100 repetitions, corresponding to 14 simulation years each, with an initial population composed of 385,422 individuals, was 30 min. Our results suggest that the model presented, based on P systems, correctly simulates the population dynamics in the period of time analyzed. We discuss the usefulness of this tool in simulating complex ecosystems dynamics to aid managers, conservationists and policy-makers in making appropriate decisions for the improvement of management and conservation programs. {\textcopyright} 2010 Elsevier B.V.},
author = {Colomer, M. {\`{A}}ngels and Margalida, Antoni and Sanuy, Delf{\'{i}} and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.1016/j.ecolmodel.2010.09.012},
file = {:D\:/jarak/Documents/Mendeley Desktop/Colomer et al. - 2011 - A bio-inspired computing model as a new tool for modeling ecosystems The avian scavengers as a case study.pdf:pdf},
issn = {03043800},
journal = {Ecological Modelling},
keywords = {Avian scavengers,Conservation,Ecosystem,P systems},
month = {1},
number = {1},
pages = {33--47},
title = {{A bio-inspired computing model as a new tool for modeling ecosystems: The avian scavengers as a case study}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S0304380010004837},
volume = {222},
year = {2011}
}
@incollection{Cardona2009,
abstract = {The Bearded Vulture (Gypaetus barbatus) is an endangered species in Europe that feeds almost exclusively on bone remains of wild and domestic ungulates. In this paper, we present a model of an ecosystem related to the Bearded Vulture in the Pyrenees (NE Spain), by using P systems. The evolution of six species is studied: the Bearded Vulture and five subfamilies of domestic and wild ungulates upon which the vulture feeds. P systems provide a high level computational modeling framework which integrates the structural and dynamic aspects of ecosystems in a comprehensive and relevant way. P systems explicitly represent the discrete character of the components of an ecosystem by using rewriting rules on multisets of objects which represent individuals of the population and bones. The inherent stochasticity and uncertainty in ecosystems is captured by using probabilistic strategies. In order to experimentally validate the P system designed, we have constructed a simulator that allows us to analyze the evolution of the ecosystem under different initial conditions. {\textcopyright} 2009 Springer Berlin Heidelberg.},
author = {Cardona, M{\'{o}}nica and Colomer, M. Angels and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Sanuy, Delf{\'{i}} and Margalida, Antoni},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-540-95885-7_11},
editor={Corne, David Wolfe and Frisco, Pierluigi and P{\u a}un, {\relax Gh}eorghe and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D\:/jarak/Documents/Mendeley Desktop/Cardona et al. - 2009 - Modeling Ecosystems Using P Systems The Bearded Vulture, a Case Study.pdf:pdf},
% issn = {03029743},
pages = {137--156},
title = {{Modeling Ecosystems Using P Systems: The Bearded Vulture, a Case Study}},
url = {http://link.springer.com/10.1007/978-3-540-95885-7_11},
volume = {5391},
year = {2009}
}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inbook{Erciyes2013,
author="Erciyes, K.",
title="Graph Traversals",
bookTitle="Distributed Graph Algorithms for Computer Networks",
year="2013",
publisher="Springer London",
address="London",
pages="53--67",
abstract="This chapter introduces the basic distributed algorithms for breadth first search and depth first search in a graph. A spanning tree of the graph is formed after the execution of both algorithms.",
isbn="978-1-4471-5173-9",
doi="10.1007/978-1-4471-5173-9_5",
url="https://doi.org/10.1007/978-1-4471-5173-9_5"
}

