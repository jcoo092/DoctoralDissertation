%%%%%%%%%%%
% General %
%%%%%%%%%%%

@book{Paun2002,
address = {Berlin, Heidelberg},
author = {Păun, Gheorghe},
doi = {10.1007/978-3-642-56196-2},
file = {:D$\backslash$:/jarak/Documents/Păun - 2002 - Membrane Computing.pdf:pdf},
isbn = {978-3-540-43601-0},
publisher = {Springer Berlin Heidelberg},
series = {Natural Computing Series},
title = {{Membrane Computing}},
url = {http://link.springer.com/10.1007/978-3-642-56196-2 http://link.springer.com/10.1007/978-3-540-92910-9{\_}40},
year = {2002}
}
@book{Paun2010b,
abstract = {Part of the broader research field of natural computing, Membrane Computing is an area within computing science that aims to abstract computing ideas and models from the structure and functioning of living cells, as well as from the way the cells are organized in tissues or higher order structures. It studies models of computation (known as P systems) inspired by the biochemistry of cells, in particular by the role of membranes in the compartmentalization of living cells into "protected reactors". This handbook provides both a comprehensive survey of available knowledge and established research topics, and a guide to recent developments in the field, covering the subject from theory to applications. The handbook is suitable both for introducing novices to this area of research, and as a main source of reference for active researchers. It sets out the necessary biological and formal background, with the introductory chapter serving as a gentle introduction to and overview of membrane computing. Individual chapters, written by leading researchers in membrane computing, present the state of the art of all main research trends and include extensive bibliographies.},
address = {New York, NY, USA},
author = {Păun, Gheorghe and Rozenberg, Grzegorz and Salomaa, Arto},
isbn = {9780199556670},
publisher = {Oxford University Press, Inc.},
title = {{The Oxford Handbook of Membrane Computing}},
year = {2010}
}
@incollection{Henderson2019,
address = {Berlin, Heidelberg},
author = {Henderson, Alec and Nicolescu, Radu},
booktitle = {Handbook of Natural Computing},
doi = {10.1007/978-3-030-12797-8_12},
editor = {Rozenberg, Grzegorz and B{\"{a}}ck, Thomas and Kok, Joost N.},
file = {:D$\backslash$:/jarak/Documents/Henderson, Nicolescu - 2019 - Actor-Like cP Systems.pdf:pdf},
isbn = {978-3-540-92909-3},
keywords = {Actor mod,Distributed algorithms,Synchronous model,actor model,byzantine agreement,cp systems,distributed algorithms,eig trees,inter-cell parallelism,intra-cell parallelism,membrane computing,p systems,prolog terms and unification,synchronous model},
pages = {160--187},
publisher = {Springer Berlin Heidelberg},
title = {{Actor-Like cP Systems}},
url = {http://link.springer.com/10.1007/978-3-030-12797-8{\_}12},
year = {2019}
}
@incollection{Nicolescu2018,
abstract = {We overview the current state of cP systems and illustrate it with a series of old and new examples, intentionally simple, but fundamental in their areas. cP systems -- i.e. P systems with compound terms -- share the fundamental features of traditional cell-like (tree-based) and tissue (graph-based) P systems: unlimited space and computing power, cells, nested cells, multisets, messages, rewriting rules, possibly running in maximal parallel modes. In contrast to traditional P systems, inner nested cells do not have their own rulesets. However, this restriction is usually more than compensated by their significant extensions: compound Prolog-like terms, high-level rules, control on incoming messages. Additionally, the same rulesets can run in either synchronous or asynchronous mode, without any syntactic change. cP systems have been successfully used to model quite a few fundamental and real-life problems, e.g. in NP complexity, data structures, graph theory, distributed algorithms, image processing. As trademark, cP models use fixed sized alphabets and crisp rulesets, independent of the problem size. The samples cover a wide variety of areas, such as arithmetic, list structures, summary statistics and sorting, asynchronous communications, {\$}{\$}$\backslash$mu {\$}{\$}{\$}\mu{\$}-recursive functions.},
address = {Cham},
author = {Nicolescu, Radu and Henderson, Alec},
booktitle = {Enjoying Natural Computing: Essays Dedicated to Mario de Jes{\'{u}}s P{\'{e}}rez-Jim{\'{e}}nez on the Occasion of His 70th Birthday},
doi = {10.1007/978-3-030-00265-7_17},
editor = {Graciani, Carmen and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n and Păun, Gheorghe and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:D$\backslash$:/jarak/Documents//B - 2018 - Enjoying Natural Computing.pdf:pdf},
isbn = {978-3-030-00265-7},
number = {1},
pages = {204--227},
publisher = {Springer International Publishing},
series = {Lecture Notes in Computer Science},
title = {{An Introduction to cP Systems}},
url = {https://doi.org/10.1007/978-3-030-00265-7{\_}17},
year = {2018}
}
@article{Zhang2012,
abstract = {? Springer Science+Business Media B.V. 2012.This paper presents a membrane algorithm, called MAQIS, by appropriately combining concepts and principles of membrane computing and quantum-inspired evolutionary approach. MAQIS has four distinct features from the membrane algorithms reported in the literature: initial solutions are only inside the skin membrane; different regions separated by membranes have different components of the algorithm; all the components inside membranes cooperate to produce offspring in a single evolutionary generation; communication rules are performed in a single evolutionary step. Extensive experiments conducted on knapsack problems show that MAQIS outperforms five counterpart approaches and our previous work. The effectiveness of MAQIS is also verified in the application of image processing.},
author = {Zhang, Gexiang and Gheorghe, Marian and Li, Yuquan},
doi = {10.1007/s11047-012-9320-2},
issn = {15729796},
journal = {Natural Computing},
keywords = {Image sparse decomposition,Knapsack problem,Membrane algorithm,Membrane computing,Quantum-inspired evolutionary algorithm},
month = {12},
number = {4},
pages = {701--717},
title = {{A membrane algorithm with quantum-inspired subalgorithms and its application to image processing}},
url = {http://dx.doi.org/10.1007/s11047-012-9320-2},
volume = {11},
year = {2012}
}
@article{Paun2000,
abstract = {A new computability model, of a distributed type, based on the notion of a membrane structure is developed. The structure consists of several cell-like membranes, recurrently placed inside a unique `skin' membrane. A plane representation is a Venn diagram without intersected sets and with a unique superset. In the regions delimited by the membranes there are placed objects. These objects are assumed to evolve. A priority relation between evolution rules are considered. The evolution is done in parallel for all objects able to evolve.},
author = {Păun, Gheorghe},
doi = {10.1006/jcss.1999.1693},
% isbn = {0022-0000},
issn = {00220000},
journal = {Journal of Computer and System Sciences},
month = {8},
number = {1},
pages = {108--143},
title = {{Computing with Membranes}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0022000099916938 https://linkinghub.elsevier.com/retrieve/pii/S0022000099916938},
volume = {61},
year = {2000}
}
@TECHREPORT{tPaun98a,
  title = {Computing with Membranes},
  author = {Păun, Gheorghe},
  number = {TUCS-TR-208},
%   series = {TUCS Technical Reports},
  institution = {Turku Centre for Computer Science},
  year = {1998},
  keywords = {Membrane structure, Super-cell system, Recursively enumerable set, Matrix grammar, Splicing, Natural computing},
  url = {https://tucs.fi/publications/view/?pub_id=tPaun98a},
}
@TECHREPORT{tMaPaPaRo01a,
  title = {Tissue P Systems},
  author = {Martín-Vide, Carlos and Pãun, Gheorghe and Pazoz, Juan and Rodriguez-Paton, Alfonso},
  number = {TUCS-TR-421},
%   series = {TUCS Technical Reports},
  institution = {Turku Centre for Computer Science},
  year = {2001},
  keywords = {Natural computing, Computing with membranes, Chomsky hierarchy, L systems, Neural networks},
  url = {https://tucs.fi/publications/view/?pub_id=tMaPaPaRo01a},
}
@book{Zhang2017,
address = {Cham},
author = {Zhang, Gexiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J and Gheorghe, Marian},
doi = {10.1007/978-3-319-55989-6},
editor = {Zelinka, Ivan and Adamatzky, Andrew and Chen, Guanrong},
file = {:D$\backslash$:/jarak/Documents/Zhang, P{\'{e}}rez-Jim{\'{e}}nez, Gheorghe - 2017 - Real-life Applications with Membrane Computing.pdf:pdf},
isbn = {978-3-319-55987-2},
publisher = {Springer International Publishing},
series = {Emergence, Complexity and Computation},
title = {{Real-life Applications with Membrane Computing}},
url = {http://www.springer.com/series/10624 http://link.springer.com/10.1007/978-3-319-55989-6},
volume = {25},
year = {2017}
}
@article{Martin-Vide2003,
abstract = {Starting from the way the inter-cellular communication takes place by means of protein channels (and also from the standard knowledge about neuron functioning), we propose a computing model called a tissue P system, which processes symbols in a multiset rewriting sense, in a net of cells. Each cell has a finite state memory, processes multisets of symbol-impulses, and can send impulses ("excitations") to the neighboring cells. Such cell nets are shown to be rather powerful: they can simulate a Turing machine even when using a small number of cells, each of them having a small number of states. Moreover, in the case when each cell works in the maximal manner and it can excite all the cells to which it can send impulses, then one can easily solve the Hamiltonian Path Problem in linear time. A new characterization of the Parikh images of ET0L languages is also obtained in this framework. Besides such basic results, the paper provides a series of suggestions for further research. {\textcopyright} 2002 Elsevier Science B.V. All rights reserved.},
author = {Mart{\'{i}}n-Vide, Carlos and Pǎun, Gheorghe and Pazos, Juan and Rodr{\'{i}}guez-Pat{\'{o}}n, Alfonso},
doi = {10.1016/S0304-3975(02)00659-X},
file = {:D$\backslash$:/jarak/Documents/Mart{\'{i}}n-Vide et al. - 2003 - Tissue P systems.pdf:pdf},
issn = {03043975},
journal = {Theoretical Computer Science},
keywords = {Chomsky hierarchy,Lindenmayer hierarchy,Membrane computing,NP-complete problems,Natural computing,P systems},
number = {2},
pages = {295--326},
title = {{Tissue P systems}},
volume = {296},
year = {2003}
}
@article{Sosik2003,
abstract = {We study the computational power of cell division operations in the formal framework of P systems, a mathematical model of cell-like membrane structure with regulated transport of objects (molecules) through membranes. We show that a uniform family of P systems with active membranes and 2-division is able to solve the well-known PSPACE-complete problem QBF in linear time. This result implies that such a family of P systems modelling cell division is at least as powerful as so-called Second Machine Class computers. The Second Machine Class, containing most of the fundamental parallel computer models such as parallel RAM machines of types SIMD and MIMD, vector machines and others, is characterized by using an exponential amount of resources (processing units) with respect to the computing time. {\textcopyright} 2003 Kluwer Publishers.},
annote = {ID: Sos{\'{i}}k2003},
author = {Sos{\'{i}}k, Petr},
doi = {10.1023/A:1025401325428},
issn = {15677818},
journal = {Natural Computing},
keywords = {Membrane computing,P system,Second Machine Class},
number = {3},
pages = {287--298},
title = {{The computational power of cell division in P systems: Beating down parallel computers?}},
url = {http://dx.doi.org/10.1023/A:1025401325428},
volume = {2},
year = {2003}
}
@article{Jimenez2003,
abstract = {In this paper we introduce four complexity classes for cellular computing systems with membranes: the first and the second ones contain all decision problems solvable in polynomial time by a family of deterministic P systems, without and with an input membrane, respectively; the third and fourth classes contain all decision problems solvable in polynomial time by a family of non-deterministic P systems, without and with an input membrane, respectively. We illustrate the usefulness of these classes by solving two NP-complete problems, namely HPP and SAT, in both variants of P systems. {\textcopyright} 2003 Kluwer Academic Publishers.},
author = {{P{\'{e}}rez Jim{\'{e}}nez}, Mario J. and {Romero Jim{\'{e}}nez}, {\'{A}}lvaro and {Sancho Caparrini}, Fernando},
doi = {10.1023/A:1025449224520},
issn = {15677818},
journal = {Natural Computing},
keywords = {Complexity classes,Membrane computing,P systems},
month = {9},
number = {3},
pages = {265--285},
title = {{Complexity classes in models of cellular computing with membranes}},
url = {https://doi.org/10.1023/A:1025449224520},
volume = {2},
year = {2003}
}
@techreport{Paun1999a,
abstract = {P systems are parallel Molecular Computing models based on processing multisets of objects in cell-like membrane structures. Various variants were already shown to be computationally universal, equal in power to Turing machines. In this paper one proposes a class of P systems whose membranes are the main active components, in the sense that they directly mediate the evolution and the communication of objects. Moreover, the membranes can multiply themselves by division. We prove that this variant is not only computationally universal, but also able to solve NP complete problems in polynomial (actually, linear) time. We exemplify this assertion with the well-known SAT problem.},
address = {Auckland},
author = {Păun, Gheorghe},
file = {:D$\backslash$:/jarak/Documents/Păun - 1999 - P systems with active membranes Attacking NP-Complete problems.pdf:pdf},
institution = {University of Auckland},
pages = {1--17},
title = {{P systems with active membranes: Attacking NP-Complete problems}},
url = {https://www.cs.auckland.ac.nz/research/groups/CDMTCS/researchreports/index.php?author{\&}open=177},
year = {1999}
}
@article{Ionescu2006,
abstract = {This paper proposes a way to incorporate the idea of spiking neurons into the area of membrane computing, and to this aim we introduce a class of neural-like P systems which we call spiking neural P systems (in short, SN P systems). In these devices, the time (when the neurons fire and/or spike) plays an essential role. For instance, the result of a computation is the time between the moments when a specified neuron spikes. Seen as number computing devices, SN P systems are shown to be computationally complete (both in the generating and accepting modes, in the latter case also when restricting to deterministic systems). If the number of spikes present in the system is bounded, then the power of SN P systems falls drastically, and we get a characterization of semilinear sets. A series of research topics and open problems are formulated.},
author = {Ionescu, Mihai and Păun, Gheorghe and Yokomori, Takashi},
file = {:D$\backslash$:/jarak/Documents//Ionescu, Păun, Yokomori - 2006 - Spiking Neural P Systems.pdf:pdf},
% isbn = {2012014213008},
issn = {01692968},
journal = {Fundamenta Informaticae},
keywords = {Cells,Computers,Mathematics,Neurons,Science,Spiking neurons,Turing computability,membrane computing,semilinear set},
number = {2/3},
pages = {279--308},
title = {{Spiking Neural P Systems}},
volume = {71},
year = {2006}
}
@article{Cooper2019,
author = {Cooper, James and Nicolescu, Radu},
doi = {10.3233/FI-2019-1760},
editor = {Pan, Linqiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Zhang, Gexiang},
issn = {01692968},
journal = {Fundamenta Informaticae},
month = {1},
number = {2-3},
pages = {157--180},
title = {{The Hamiltonian Cycle and Travelling Salesman Problems in cP Systems}},
url = {https://www.medra.org/servlet/aliasResolver?alias=iospress{\&}doi=10.3233/FI-2019-1760},
volume = {164},
year = {2019}
}
@article{Cooper2019a,
author = {Cooper, James and Nicolescu, Radu},
doi = {10.1007/s41965-019-00013-2},
file = {:D$\backslash$:/Users/jcoo092/Writing/2019/G-Col JMC/Cooper-Nicolescu2019{\_}Article{\_}AlternativeRepresentationsOfPS.pdf:pdf},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Concurrent ML,Graph colouring problem,Simple kernel P systems,cP systems,concurrent ml,cp systems,graph colouring problem,simple kernel p systems},
month = {6},
number = {2},
pages = {112--126},
publisher = {Springer Singapore},
title = {{Alternative representations of P systems solutions to the graph colouring problem}},
url = {https://doi.org/10.1007/s41965-019-00013-2 http://link.springer.com/10.1007/s41965-019-00013-2},
volume = {1},
year = {2019}
}
@incollection{Nicolescu2014a,
abstract = {We develop and formalise our earlier complex objects proposal and show that it enables an efficient high-level programming of P systems. {\textcopyright} 2014 Springer-Verlag Berlin Heidelberg.},
address = {Berlin, Heidelberg},
annote = {From Duplicate 1 (Programming P systems with complex objects - Nicolescu, Radu; Ipate, Florentin; Wu, Huiling)

ID: Nicolescu2014

From Duplicate 2 (Programming P systems with complex objects - Nicolescu, Radu; Ipate, Florentin; Wu, Huiling)

From Duplicate 1 (Programming P Systems with Complex Objects - Nicolescu, Radu; Ipate, Florentin; Wu, Huiling)

ID: Nicolescu2014},
author = {Nicolescu, Radu and Ipate, Florentin and Wu, Huiling},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-54239-8_20},
editor = {Alhazov, Artiom and Cojocaru, Svetlana and Gheorghe, Marian and Rogozhin, Yurii and Rozenberg, Grzegorz and Salomaa, Arto},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nicolescu, Ipate, Wu - 2014 - Programming P Systems with Complex Objects.pdf:pdf},
isbn = {9783642542381},
% issn = {16113349},
keywords = {NP-complete,P systems,applications,complex objects,control flow,data structures,function calls,generic rules,numerical P systems,parallel composition,recursion},
number = {i},
pages = {280--300},
publisher = {Springer Berlin Heidelberg},
title = {{Programming P Systems with Complex Objects}},
url = {http://link.springer.com/10.1007/978-3-642-54239-8{\_}20},
volume = {8340 LNCS},
year = {2014}
}
@incollection{Nicolescu2017,
abstract = {We refine our earlier version of P systems with complex symbols. The new version, called cP systems, enables the creation and manipulation of high-level data structures which are typical in high-level languages, such as: relations (graphs), associative arrays, lists, trees. We assess these capabilities by attempting a revised version of our previously best solution for the Byzantine agreement problem – a famous problem in distributed algorithms, with non-trivial data structures and algorithms. In contrast to our previous solutions, which use a greater than exponential number of symbols and rules, the new solution uses a fixed sized alphabet and ruleset, independent of the problem size. The new ruleset follows closely the conceptual description of the algorithm. This revised framework opens the way to further extensions, which may bring P systems closer to the conceptual Actor model.},
author = {Nicolescu, Radu},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-54072-6_20},
editor = {Leporati, Alberto and Rozenberg, Grzegorz and Salomaa, Arto and Claudio, Zandron},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nicolescu - 2017 - Revising the Membrane Computing Model for Byzantine Agreement.pdf:pdf},
isbn = {9783319540719},
% issn = {16113349},
keywords = {Actor model,Byzantine agreement,Cells with subcells,Complex symbols,Distributed algorithms,EIG trees,Generic rules,Inter-cell parallelism,Intra-cell parallelism,Membrane computing,P systems,Prolog terms and unification,Synchronous and asynchronous models,cP systems},
pages = {317--339},
title = {{Revising the membrane computing model for byzantine agreement}},
url = {http://link.springer.com/10.1007/978-3-319-54072-6{\_}20},
volume = {10105 LNCS},
year = {2017}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Image Processing & Computer Vision %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@article{Diaz-Pernil2019,
author = {D{\'{i}}az-Pernil, Daniel and Guti{\'{e}}rrez-Naranjo, Miguel A. and Peng, Hong},
doi = {10.1007/s41965-018-00002-x},
file = {:D$\backslash$:/jarak/Documents/D{\'{i}}az-Pernil, Guti{\'{e}}rrez-Naranjo, Peng - 2019 - Membrane computing and image processing a short survey.pdf:pdf},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
keywords = {Image processing,Membrane computing,P systems,image processing,membrane computing,p systems},
month = {3},
number = {1},
pages = {58--73},
% publisher = {Springer Singapore},
title = {{Membrane computing and image processing: a short survey}},
url = {http://link.springer.com/10.1007/s41965-018-00002-x},
volume = {1},
year = {2019}
}
@incollection{Nicolescu2015a,
author = {Nicolescu, Radu},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
editor = {Rozenberg G. and Salomaa A. and Sempere J. and Zandron C.},
doi = {10.1007/978-3-319-28475-0_22},
file = {:D$\backslash$:/jarak/Documents/Nicolescu - 2015 - Structured Grid Algorithms Modelled with Complex Objects.pdf:pdf},
isbn = {9783319284743},
% issn = {16113349},
keywords = {complex objects,els,generic rules,image processing,inter-cell parallelism,intra-cell parallelism,membrane computing,p systems,parallel and concurrent mod-,prolog terms,seeded region growing,synchronous and asynchronous models,termination detection},
pages = {321--337},
title = {{Structured Grid Algorithms Modelled with Complex Objects}},
url = {http://link.springer.com/10.1007/978-3-319-28475-0{\_}22},
volume = {9504},
year = {2015}
}
@article{GimelFarb2013a,
abstract = {Designing parallel versions of sequential algorithms has attracted renewed attention, due to recent hardware advances, including various general-purpose multi-core and many-core processors, as well as special-purpose FPGA implementations. P systems consist of networks of autonomous cells, such that each cell transforms its input signals in accord with its symbol-rewriting rules and feeds the output results into its immediate neighbours. Inherent massive intra- and inter-cell parallelisms make P systems a prospective theoretical testbed for designing efficient parallel and parallel-sequential algorithms. This paper discusses the capabilities of P systems to implement the symmetric dynamic programming stereo (SDPS) matching algorithm, which explicitly accounts for binocular or monocular visibility of 3D surface points. Given enough cells, the P system implementation speeds up the inner algorithm loop from O(nd) to O(n+d), where n is the width of a stereo image and d is the disparity range. The implementation gives also an insight into a more general SDPS that accounts for a possible multiplicity of solutions of the ill-posed problem of optimal stereo matching.},
% address = {Boston},
author = {Gimel'farb, Georgy L. and Nicolescu, Radu and Ragavan, Sharvin},
doi = {10.1007/s10851-012-0367-6},
file = {:D$\backslash$:/jarak/Documents//Gimel'farb, Nicolescu, Ragavan - 2013 - P system implementation of dynamic programming stereo.pdf:pdf},
issn = {09249907},
journal = {Journal of Mathematical Imaging and Vision},
keywords = {Membrane computing,Parallel systems,Stereo matching,Symmetric dynamic programming stereo (SDPS)},
month = {9},
number = {1-2},
pages = {13--26},
% publisher = {Springer US},
title = {{P system implementation of dynamic programming stereo}},
volume = {47},
year = {2013}
}
@incollection{Gimelfarb2011,
abstract = {Designing parallel versions of sequential algorithms has attracted renewed attention, due to recent hardware advances, including various general-purpose multi-core, multiple core and many-core processors, as well as special-purpose FPGA implementations. P systems consist of networks of autonomous cells, such that each cell transforms its input signals in accord with symbol-rewriting rules and feeds the output results into its immediate neighbours. Inherent intra- and inter-cell parallelism make the P systems a prospective theoretical testbed for designing parallel algorithms. This paper discusses capabilities of P systems to implement the symmetric dynamic programming algorithm for stereo matching, with due account to binocular or monocular visibility of 3D surface points. {\textcopyright} 2011 Springer-Verlag.},
address = {Berlin, Heidelberg},
author = {Gimel'farb, Georgy L. and Nicolescu, Radu and Ragavan, Sharvin},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-23678-5_33},
editor = {Real, Pedro and Diaz-Pernil, Daniel and Molina-Abril, Helena and Berciano, Ainhoa and Kropatsch, Walter},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Gimel'farb, Nicolescu, Ragavan - 2011 - P systems in stereo matching.pdf:pdf},
isbn = {9783642236778},
% issn = {03029743},
keywords = {Parallel systems,membrane computing,stereo matching,symmetric dynamic programming stereo (SDPS)},
month = {7},
number = {PART 2},
pages = {285--292},
publisher = {Springer Berlin Heidelberg},
title = {{P systems in stereo matching}},
url = {http://link.springer.com/10.1007/978-3-642-23678-5{\_}33},
volume = {6855 LNCS},
year = {2011}
}


@article{Diaz-Pernil2013,
abstract = {In this paper, we present a parallel implementation of a new algorithm for segmenting images with gradient-based edge detection by using techniques from Natural Computing. This bio-inspired parallel algorithm has been implemented in a novel device architecture called CUDA™(Compute Unified Device Architecture). The implementation has been designed via tissue P systems on the framework of Membrane Computing. Some examples and experimental results are also presented.},
annote = {ID: 271524},
author = {D{\'{i}}az-Pernil, Daniel and Berciano, Ainhoa and Pe{\~{n}}a-Cantillana, Francisco and Guti{\'{e}}rrez-Naranjo, Miguel A.},
journal = {Pattern Recognition Letters},
doi = {10.1016/j.patrec.2012.10.014},
% isbn = {0167-8655},
issn = {01678655},
number = {8},
pages = {846--855},
title = {{Segmenting images with gradient-based edge detection using Membrane Computing}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0167865512003443},
volume = {34},
year = {2013}
}
@article{Diaz-Pernil2013a,
abstract = {Skeletonization is a common type of transformation within image analysis. In general, the image B is a skeleton of the black and white image A, if the image B is made of fewer black pixels than the image A, it does preserve its topological properties and, in some sense, keeps its meaning. In this paper, we aim to use spiking neural P systems (a computational model in the framework of membrane computing) to solve the skeletonization problem. Based on such devices, a parallel software has been implemented within the Graphics Processors Units (GPU) architecture. Some of the possible real-world applications and new lines for future research will be also dealt with in this paper. {\textcopyright} 2013 Elsevier B.V.},
author = {D{\'{i}}az-Pernil, Daniel and Pe{\~{n}}a-Cantillana, Francisco and Guti{\'{e}}rrez-Naranjo, Miguel A.},
doi = {10.1016/j.neucom.2012.12.032},
% isbn = {0925-2312},
issn = {09252312},
journal = {Neurocomputing},
keywords = {Guo and Hall algorithm,Membrane computing,Skeletonizing,Spiking neural P systems},
month = {9},
pages = {81--91},
% publisher = {Elsevier B.V},
title = {{A parallel algorithm for skeletonizing images by using spiking neural P systems}},
volume = {115},
year = {2013}
}
@article{Christinal2011,
abstract = {Membrane Computing is a biologically inspired computational model. Its devices are called P systems and they perform computations by applying a finite set of rules in a synchronous, maximally parallel way. In this paper, we develop a variant of P-system, called tissue-like P system in order to design in this computational setting, a region-based segmentation algorithm of 2D pixel-based and 3D voxel-based digital images. Concretely, we use 4-adjacency neighborhood relation between pixels in 2D and 6-adjacency neighborhood relation between voxel in 3D for segmenting digital images in a constant number of steps. Finally, specific software is used to check the validity of these systems with some simple examples. {\textcopyright} 2011 Elsevier B.V. All rights reserved.},
author = {Christinal, Hepzibah A. and D{\'{i}}az-Pernil, Daniel and Real, Pedro},
doi = {10.1016/j.patrec.2011.05.004},
file = {:D$\backslash$:/jarak/Documents/Christinal, D{\'{i}}az-Pernil, Real - 2011 - Region-based segmentation of 2D and 3D images with tissue-like P systems.pdf:pdf},
issn = {01678655},
journal = {Pattern Recognition Letters},
keywords = {Digital image,Digital topology,Membrane Computing,P systems,Region-based segmentation},
month = {12},
number = {16},
pages = {2206--2212},
% publisher = {Elsevier B.V.},
title = {{Region-based segmentation of 2D and 3D images with tissue-like P systems}},
url = {http://dx.doi.org/10.1016/j.patrec.2011.05.004 http://linkinghub.elsevier.com/retrieve/pii/S0167865511001395},
volume = {32},
year = {2011}
}
@article{Diaz-Pernil2016,
abstract = {This paper presents a fully automatic parallel software for the localization of the optic disc (OD) in retinal fundus color images. A new method has been implemented with the Graphics Processing Units (GPU) technology. Image edges are extracted using a new operator, called AGP-color segmentator. The resulting image is binarized with Hamadani's technique and, finally, a new algorithm called Hough circle cloud is applied for the detection of the OD. The reliability of the tool has been tested with 129 images from the public databases DRIVE and DIARETDB1 obtaining an average accuracy of 99.6{\%} and a mean consumed time per image of 7.6 and 16.3 s respectively. A comparison with several state-of-the-art algorithms shows that our algorithm represents a significant improvement in terms of accuracy and efficiency.},
annote = {ID: 271524},
author = {D{\'{i}}az-Pernil, Daniel and Fond{\'{o}}n, Irene and Pe{\~{n}}a-Cantillana, Francisco and Guti{\'{e}}rrez-Naranjo, Miguel A.},
journal = {Pattern Recognition Letters},
doi = {10.1016/j.patrec.2016.04.025},
% isbn = {0167-8655},
issn = {01678655},
keywords = {GPU,Hough transform,Optic disc,Parallel image processing},
pages = {99--107},
title = {{Fully automatized parallel segmentation of the optic disc in retinal fundus images}},
url = {http://www.sciencedirect.com.ezproxy.auckland.ac.nz/science/article/pii/S0167865516300794},
volume = {83},
year = {2016}
}
@article{Nicolescu2014b,
abstract = {We propose a novel approach to justify and guide regularisation of an ill-posed one-dimensional global optimisation with multiple solutions using a massively parallel (P system) model of the solution space. Classical optimisation assumes a well-posed problem with a stable unique solution. Most of important practical problems are ill posed due to an unstable or non-unique global optimum and are regularised to get a unique best-suited solution. Whilst regularisation theory exists largely for unstable unique solutions, its recommendations are often routinely applied to inverse optical problems with essentially non-unique solutions, e.g. computer stereo vision or image segmentation, typically formulated in terms of global energy minimisation. In these cases the recommended regularisation becomes purely heuristic and does not guarantee a unique solution. As a result, classical optimisation algorithms: dynamic programming (DP) and belief propagation (BP) - meet with difficulties. Our recent concurrent propagation (CP), leaning upon the P systems paradigm, extends DP and BP to always detect whether the problem is ill posed or not and store in the ill-posed case an entire space of solutions that yield the same global optimum. This suggests a radically new path to proper regularisation: select the best-suited unique solution by exploring statistical and structural features of this space. We propose a P systems based implementation of CP and set out as a case study an application of CP to the image matching problem in stereo vision.},
author = {Nicolescu, Radu and Gimel'farb, Georgy L. and Delmas, Patrice and Gong, Rui},
doi = {10.3233/FI-2014-1026},
file = {:D$\backslash$:/jarak/Documents/Nicolescu et al. - 2014 - Regularising ill-posed discrete optimisation Quests with P systems.pdf:pdf},
issn = {01692968},
journal = {Fundamenta Informaticae},
keywords = {Actor model,Concurrent propagation,Ill-posed problems,Membrane computing,Multiple solutions,P systems,Parallel and distributed computing models,Regularisation,Stereo matching},
number = {3-4},
pages = {465--483},
% publisher = {IOS Press},
title = {{Regularising ill-posed discrete optimisation: Quests with P systems}},
url = {http://ezproxy.auckland.ac.nz/login?url=http://search.ebscohost.com/login.aspx?direct=true{\&}db=iih{\&}AN=95064509{\&}site=ehost-live{\&}scope=site},
volume = {131},
year = {2014}
}
@incollection{Nicolescu2014,
abstract = {Based on our earlier complex objects proposal, we present three novel concurrent membrane computing models for a fundamental image processing task: the thinning (or skeletonisation) of binary images, based on the classical Guo-Hall algorithm (A2). The first model is synchronous and uses one cell per pixel and relies on inter-cell parallelism; the second model is an asynchronous version of the first; the third model uses one single cell, with one sub-cellular object per pixel, and relies on intra-cell parallelism. The static and dynamic qualities of our models validate our complex objects proposal: (i) the proposed models are crisp (comparable to the best pseudocode); and (ii) complex objects concurrency and messaging can be efficiently emulated on a message-based Actors framework (which opens a novel research path).},
address = {Cham},
annote = {From Duplicate 1 (Parallel Thinning with Complex Objects and Actors - Nicolescu, Radu)

From Duplicate 1 (Parallel thinning with complex objects and actors - Nicolescu, Radu)

ID: Nicolescu2014},
author = {Nicolescu, Radu},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-14370-5_21},
editor = {Gheorghe, Marian and Rozenberg, Grzegorz and Salomaa, Arto and Sos{\'{i}}k, Petr and Zandron, Claudio},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nicolescu - 2014 - Parallel Thinning with Complex Objects and Actors(2).pdf:pdf},
isbn = {9783319143705},
% issn = {16113349},
keywords = {Actor model,Complex objects,Generic rules,Guo-Hall algorithm,Image processing,Inter-cell parallelism,Intra-cell parallelism,Membrane computing,Message-based,P systems,Parallel and concurrent models,Prolog terms,Synchronous and asynchronous models,Termination detection},
pages = {330--354},
publisher = {Springer International Publishing},
title = {{Parallel Thinning with Complex Objects and Actors}},
url = {http://dx.doi.org/10.1007/978-3-319-14370-5{\_}21 http://link.springer.com/10.1007/978-3-319-14370-5{\_}21},
volume = {8961},
year = {2014}
}



%%%%%%%
% GPU %
%%%%%%%
@article{Cecilia2010a,
abstract = {P systems or Membrane Systems provide a high-level computational modelling framework that combines the structure and dynamic aspects of biological systems in a relevant and understandable way. They are inherently parallel and non-deterministic computing devices. In this article, we discuss the motivation, design principles and key of the implementation of a simulator for the class of recognizer P systems with active membranes running on a (GPU).We compare our parallel simulator for GPUs to the simulator developed for a single central processing unit (CPU), showing that GPUs are better suited than CPUs to simulate P systems due to their highly parallel nature. {\textcopyright} The Author 2009. Published by Oxford University Press.},
% address = {England},
author = {Cecilia, Jos{\'{e}} M. and Garcia, J. M. and Guerrero, Gin{\'{e}}s D. and Martinez-del-Amor, M. A. and Perez-Hurtado, I. and Perez-Jimenez, M. J.},
doi = {10.1093/bib/bbp064},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cecilia et al. - 2009 - Simulation of P systems with active membranes on CUDA.pdf:pdf},
% isbn = {9780769538099},
issn = {1467-5463},
journal = {Briefings in Bioinformatics},
keywords = {CUDA,GPU,Membrane computing,Natural computing,P Systems,Parallel computing},
month = {5},
number = {3},
pages = {313--322},
% pmid = {20038568},
% publisher = {Oxford Publishing Limited(England)},
title = {{Simulation of P systems with active membranes on CUDA}},
url = {https://academic.oup.com/bib/article-lookup/doi/10.1093/bib/bbp064},
volume = {11},
year = {2010}
}
@article{Cecilia2010,
abstract = {P systems are inherently parallel and non-deterministic theoretical computing devices defined inside the field of Membrane Computing. Many P system simulators have been presented in this area, but they are inefficient since they cannot handle the parallelism of these devices. Nowadays, we are witnessing the consolidation of the GPUs as a parallel framework to compute general purpose applications. In this paper, we analyse GPUs as an alternative parallel architecture to improve the performance in the simulation of P systems, and we illustrate it by using the case study of a family of P systems that provides an efficient and uniform solution to the SAT problem. Firstly, we develop a simulator that fully simulates the computation of the P system, demonstrating that GPUs are well suited to simulate them. Then, we adapt this simulator to the GPU architecture idiosyncrasies, improving the performance of the previous simulator. {\textcopyright} 2010 Elsevier Inc. All rights reserved.},
annote = {ID: 272213},
author = {Cecilia, Jos{\'{e}} M. and Garc{\'{i}}a, Jos{\'{e}} M. and Guerrero, Gin{\'{e}}s D. and Mart{\'{i}}nez-Del-Amor, Miguel A. and P{\'{e}}rez-Hurtado, Ignacio and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.1016/j.jlap.2010.03.008},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cecilia et al. - 2010 - The Journal of Logic and Algebraic Programming Simulating a P system based efficient solution to SAT by using GP.pdf:pdf},
issn = {15678326},
journal = {Journal of Logic and Algebraic Programming},
keywords = {GPUs,Membrane Computing,P systems,SAT},
month = {8},
number = {6},
pages = {317--325},
title = {{Simulating a P system based efficient solution to SAT by using GPUs}},
url = {http://dx.doi.org/10.1016/j.jlap.2010.03.008 https://linkinghub.elsevier.com/retrieve/pii/S1567832610000123},
volume = {79},
year = {2010}
}
@article{Cecilia2013,
abstract = {We present GPU implementations of two different nature-inspired optimization methods for well-known optimization problems. Ant Colony Optimization (ACO) is a two-stage population-based method modelled on the foraging behaviour of ants, while P systems provide a high-level computational modelling framework that combines the structure and dynamic aspects of biological systems (in particular, their parallel and non-deterministic nature). Our methods focus on exploiting data parallelism and memory hierarchy to obtain GPU factor gains surpassing 20x for any of the two stages of the ACO algorithm, and 16x for P systems when compared to sequential versions running on a single-threaded high-end CPU. Additionally, we compare performance between GPU generations to validate hardware enhancements introduced by Nvidia's Fermi architecture. {\textcopyright} 2012 Springer Science+Business Media, LLC.},
author = {Cecilia, Jos{\'{e}} M. and Nisbet, Andy and Amos, Martyn and Garc{\'{i}}a, Jos{\'{e}} M. and Ujald{\'{o}}n, Manuel},
doi = {10.1007/s11227-012-0770-1},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cecilia et al. - 2013 - Enhancing GPU parallelism in nature-inspired algorithms.pdf:pdf},
issn = {09208542},
journal = {Journal of Supercomputing},
keywords = {ACO,Bioinspired methods,GPUs,HPC,P systems},
month = {3},
number = {3},
pages = {773--789},
title = {{Enhancing GPU parallelism in nature-inspired algorithms}},
url = {http://dx.doi.org/10.1007/s11227-012-0770-1 http://link.springer.com/10.1007/s11227-012-0770-1},
volume = {63},
year = {2013}
}
@incollection{Macias-Ramos2015,
abstract = {Fuzzy Reasoning Spiking Neural P systems (FRSN P systems, for short) is a variant of Spiking Neural P systems incorporating fuzzy logic elements that make it suitable to model fuzzy diagnosis knowledge and reasoning required for fault diagnosis applications. In this sense, several FRSN P system variants have been proposed, dealing with real numbers, trapezoidal numbers, weights, etc. The model incorporating real numbers was the first introduced [13], presenting promising applications in the field of fault diagnosis of electrical systems. For this variant, a matrix-based algorithm was provided which, when executed on parallel computing platforms, fully exploits the model maximally parallel capacities. In this paper we introduce a P-Lingua framework extension to parse and simulate FRSN P systems with real numbers. Two simulators, implementing a variant of the original matrix-based simulation algorithm, are provided: a sequential one (written in Java), intended to run on traditional CPUs, and a parallel one, intended to run on CUDAenabled devices.},
address = {Cham},
annote = {From Duplicate 2 (Simulating FRSN P systems with real numbers in P-lingua on sequential and CUDA platforms - Mac{\'{i}}as-Ramos, Luis F.; Mart{\'{i}}nez-Del-Amor, Miguel A.; P{\'{e}}rez-Jim{\'{e}}nez, Mario J.)

ID: Mac{\'{i}}as-Ramos2015},
author = {Mac{\'{i}}as-Ramos, Luis F. and Mart{\'{i}}nez-del-Amor, Miguel A. and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-28475-0_18},
editor = {Rozenberg, Grzegorz and Salomaa, Arto and Sempere, Jos{\'{e}} M and Zandron, Claudio},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mac{\'{i}}as-Ramos, Mart{\'{i}}nez-del-Amor, P{\'{e}}rez-Jim{\'{e}}nez - 2015 - Simulating FRSN P Systems with Real Numbers in P-Lingua on sequential and CUDA p.pdf:pdf},
isbn = {9783319284743},
% issn = {16113349},
keywords = {CUDA,Fault diagnosis,Fuzzy Reasoning Spiking Neural P systems,Fuzzy knowledge,Fuzzy reasoning,Java,Membrane Computing,P systems,P-Lingua,Spiking Neural P systems},
pages = {262--276},
publisher = {Springer International Publishing},
title = {{Simulating FRSN P Systems with Real Numbers in P-Lingua on sequential and CUDA platforms}},
url = {http://link.springer.com/10.1007/978-3-319-28475-0{\_}18 http://dx.doi.org/10.1007/978-3-319-28475-0{\_}18},
volume = {9504},
year = {2015}
}
@article{Maroosi2014,
abstract = {In previous studies, objects of each membrane were assigned to threads of one thread block of the graphic processing unit (GPU). The number of active threads was low if the number of objects inside a membrane was low. This study represents objects of membranes as entities of a matrix. Then a sub-matrix represents the appropriate number of objects assigned to threads of each thread block to balance the load and keep the occupancy high even when the number of objects per membrane is low. The size of the sub-matrix or the appropriate number of active threads is determined automatically. Furthermore, by this approach it is possible to assign more than one membrane to each thread block and to execute communication between membranes in the same thread block without the need for time-consuming inter-block communication. For example, using the previous algorithm, for two objects per membrane the speed up is 0.6×, while for the proposed algorithm the speed up is 32.4×.},
annote = {ID: 280179},
author = {Maroosi, Ali and Muniyandi, Ravie Chandren},
doi = {10.1016/j.jocs.2014.07.003},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Maroosi, Muniyandi - 2014 - Enhancement of membrane computing model implementation on GPU by introducing matrix representation for balan.pdf:pdf},
% isbn = {1877-7503},
issn = {18777503},
journal = {Journal of Computational Science},
keywords = {Graphics processing unit,Membrane computing,P systems,Parallel processing},
month = {11},
number = {6},
pages = {861--871},
title = {{Enhancement of membrane computing model implementation on GPU by introducing matrix representation for balancing occupancy and reducing inter-block communications}},
url = {http://www.sciencedirect.com.ezproxy.auckland.ac.nz/science/article/pii/S1877750314000994 https://linkinghub.elsevier.com/retrieve/pii/S1877750314000994},
volume = {5},
year = {2014}
}
@article{Maroosi2014a,
abstract = {Membrane systems are parallel distributed computing models that are used in a wide variety of areas. Use of a sequential machine to simulate membrane systems loses the advantage of parallelism in Membrane Computing. In this paper, an innovative classification algorithm based on a weighted network is introduced. Two new algorithms have been proposed for simulating membrane systems models on a Graphics Processing Unit (GPU). Communication and synchronization between threads and thread blocks in a GPU are time-consuming processes. In previous studies, dependent objects were assigned to different threads. This increases the need for communication between threads, and as a result, performance decreases. In previous studies, dependent membranes have also been assigned to different thread blocks, requiring inter-block communications and decreasing performance. The speedup of the proposed algorithm on a GPU that classifies dependent objects using a sequential approach, for example with 512 objects per membrane, was 82×, while for the previous approach (Algorithm 1), it was 8.2×. For a membrane system with high dependency among membranes, the speedup of the second proposed algorithm (Algorithm 3) was 12×, while for the previous approach (Algorithm 1) and the first proposed algorithm (Algorithm 2) that assign each membrane to one thread block, it was 1.8×. {\textcopyright} 2014 Elsevier B.V. All rights reserved.},
annote = {From Duplicate 2 (Parallel and distributed computing models on a graphics processing unit to accelerate simulation of membrane systems - Maroosi, Ali; Muniyandi, Ravie Chandren; Sundararajan, Elankovan; Zin, Abdullah Mohd)

ID: 272648},
author = {Maroosi, Ali and Muniyandi, Ravie Chandren and Sundararajan, Elankovan and Zin, Abdullah Mohd},
doi = {10.1016/j.simpat.2014.05.005},
file = {:C$\backslash$:/Users/jcoo092/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Maroosi et al. - 2014 - Parallel and distributed computing models on a graphics processing unit to accelerate simulation of membrane sys.pdf:pdf},
% isbn = {1569-190X},
issn = {1569190X},
journal = {Simulation Modelling Practice and Theory},
keywords = {Distributed computing,Graphics processing unit,Membrane Computing,Membrane systems,Parallel processing,Weighted network},
month = {9},
pages = {60--78},
% publisher = {Elsevier B.V.},
title = {{Parallel and distributed computing models on a graphics processing unit to accelerate simulation of membrane systems}},
url = {http://dx.doi.org/10.1016/j.simpat.2014.05.005 http://www.sciencedirect.com.ezproxy.auckland.ac.nz/science/article/pii/S1569190X14000756 https://linkinghub.elsevier.com/retrieve/pii/S1569190X14000756},
volume = {47},
year = {2014}
}
@article{Martinez-Del-Amor2015,
abstract = {P systems have been proven to be useful as modeling tools in many fields, such as Systems Biology and Ecological Modeling. For such applications, the acceleration of P system simulation is often desired, given the computational needs derived from these kinds of models. One promising solution is to implement the inherent parallelism of P systems on platforms with parallel architectures. In this respect, GPU computing proved to be an alternative to more classic approaches in Parallel Computing. It provides a low cost, and a manycore platform with a high level of parallelism. The GPU has been already employed to speedup the simulation of P systems. In this paper, we look over the available parallel P systems simulators on the GPU, with special emphasis on those included in the PMCGPU project, and analyze some useful guidelines for future implementations and developments.},
author = {Mart{\'{i}}nez-del-Amor, Miguel A. and Garc{\'{i}}a-Quismondo, Manuel and Mac{\'{i}}as-Ramos, Luis F. and Valencia-Cabrera, Luis and Riscos-N{\'{u}}{\~{n}}ez, Agustin and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
doi = {10.3233/FI-2015-1157},
issn = {01692968},
journal = {Fundamenta Informaticae},
keywords = {CUDA,GPU computing,Membrane Computing,P systems,Parallel Computing},
number = {3},
pages = {269--284},
% publisher = {IOS Press},
title = {{Simulating P Systems on GPU Devices: A Survey}},
url = {http://ezproxy.auckland.ac.nz/login?url=http://search.ebscohost.com/login.aspx?direct=true{\&}db=iih{\&}AN=100848783{\&}site=ehost-live{\&}scope=site https://www.medra.org/servlet/aliasResolver?alias=iospress{\&}doi=10.3233/FI-2015-1157},
volume = {136},
year = {2015}
}
@article{Martinez-Del-Amor2013a,
abstract = {In order to provide efficient software tools to handle large membrane systems, high-throughput simulators are required. Parallel computing platforms are good candidates, since they are capable of partially implementing the inherently parallel nature of the model. In this concern, today GPUs (Graphics Processing Unit) are considered as highly parallel processors, and they have been successfully used to accelerate P system simulators. A new GPU simulator for a quadratic-time solution to SAT by means of tissue P systems with cell division is presented in this paper. This simulator is compared with a previously introduced GPU-based simulator for a linear-time solution to SAT based on P systems with active membranes. The aim of this paper is to further study which ingredients of different P systems models are well suited to be managed by the GPU.},
author = {Mart{\'{i}}nez-Del-Amor, Miguel A. and P{\'{e}}rez-Carrasco, Jes{\'{u}}s and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
file = {:D$\backslash$:/Users/jcoo092/Writing/2018/ACMC18/Reference papers/Mart{\'{i}}nez-Del-Amor, P{\'{e}}rez-Carrasco, Ṕerez-Jim{\'{e}}nez - Characterizing the parallel simulation of P systems on the GPU - 2013.pdf:pdf},
issn = {15487199},
journal = {International Journal of Unconventional Computing},
keywords = {GPGPU,Membrane computing,SAT,Tissue p systems},
number = {5-6 SPEC. ISSUE},
pages = {405--424},
% publisher = {Old City Publishing, Inc},
title = {{Characterizing the parallel simulation of P systems on the GPU}},
volume = {9},
year = {2013}
}

@book{Hennessy2012,
abstract = {"Computer Architecture: A Quantitative Approach explores the ways that software and technology in the cloud are accessed by digital media, such as cell phones, computers, tablets, and other mobile devices. The book became a part of Intel"s 2012 recommended reading list for developers, and it covers the revolution of mobile computing. The text also highlights the two most important factors in architecture today: parallelism and memory hierarchy. The six chapters that this book is composed of follow a consistent framework: explanation of the ideas in each chapter; a ""crosscutting issues"" section, which presents how the concepts covered in one chapter connect with those given in other chapters; a ""putting it all together"" section that links these concepts by discussing how they are applied in real machine; and detailed examples of misunderstandings and architectural traps commonly encountered by developers and architects. The first chapter of the book includes formulas for energy, static and dynamic power, integrated circuit costs, reliability, and availability. Chapter 2 discusses memory hierarchy and includes discussions about virtual machines, SRAM and DRAM technologies, and new material on Flash memory. The third chapter covers the exploitation of instruction-level parallelism in high-performance processors, superscalar execution, dynamic scheduling and multithreading, followed by an introduction to vector architectures in the fourth chapter. Chapters 5 and 6 describe multicore processors and warehouse-scale computers (WSCs), respectively."},
address = {Waltham, Mass.},
author = {Hennessy, John L. and Patterson, David A.},
edition = {5th Ed.},
isbn = {978-0-12-383872-8},
keywords = {Computer architecture},
publisher = {Morgan Kaufmann/Elsevier},
title = {{Computer Architecture - A Quantitative Approach}},
year = {2012}
}

@book{Rauber2010,
abstract = {Innovations in hardware architecture, like hyper-threading or multicore processors, mean that parallel computing resources are available for inexpensive desktop computers. In only a few years, many standard software products will be based on concepts of parallel programming implemented on such hardware, and the range of applications will be much broader than that of scientific computing, up to now the main application area for parallel computing. Rauber and R{\"{u}}nger take up these recent developments in processor architecture by giving detailed descriptions of parallel programming techniques that are necessary for developing efficient programs for multicore processors as well as for parallel cluster systems and supercomputers. Their book is structured in three main parts, covering all areas of parallel computing: the architecture of parallel systems, parallel programming models and environments, and the implementation of efficient application algorithms. The emphasis lies on parallel programming techniques needed for different architectures. The main goal of the book is to present parallel programming techniques that can be used in many situations for many application areas and which enable the reader to develop correct and efficient parallel programs. Many examples and exercises are provided to show how to apply the techniques. The book can be used as both a textbook for students and a reference book for professionals. The presented material has been used for courses in parallel programming at different universities for many years. {\textcopyright} Springer-Verlag Berlin Heidelberg 2010. All rights are reserved.},
address = {Berlin, Heidelberg},
author = {Rauber, Thomas and R{\"{u}}nger, Gudula},
booktitle = {Parallel Programming: For Multicore and Cluster Systems},
doi = {10.1007/978-3-642-04818-0},
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Rauber, R{\"{u}}nger - 2010 - Parallel programming For multicore and cluster systems.pdf:pdf},
isbn = {9783642048173},
issn = {1097024X},
keywords = {Operating systems,PASCAL,Simulation,Synchronization},
pages = {1--455},
publisher = {Springer Berlin Heidelberg},
title = {{Parallel programming: For multicore and cluster systems}},
url = {http://link.springer.com/10.1007/978-3-642-04818-0},
year = {2010}
}

@article{Henderson2020,
abstract = {There have been a few NP-hard problems solved using cP systems including the travelling salesman problem. However, these problems are typically in NP rather than higher in the polynomial time hierarchy. In this paper, we solve QSAT (also known as TQBF), which is a well-known PSPACE-complete problem. Compared to other extant confluent P systems solutions, our deterministic cP solution only uses a small constant number of custom alphabet symbols (19), a small constant number of rules (10) and a small constant upper limit of membrane nesting depth (6), independent of the problem size.},
author = {Henderson, Alec and Nicolescu, Radu and Dinneen, Michael J},
doi = {10.1007/s41965-020-00064-w},
issn = {2523-8906},
journal = {Journal of Membrane Computing},
month = {12},
number = {4},
pages = {311--322},
title = {{Solving a PSPACE-complete problem with cP systems}},
url = {https://doi.org/10.1007/s41965-020-00064-w http://link.springer.com/10.1007/s41965-020-00064-w},
volume = {2},
year = {2020}
}

@article{Paun2001,
abstract = {The aim of this paper is to introduce to the reader the main ideas of computing with membranes, a recent branch of (theoretical) molecular computing. In short, in a cell-like system, multisets of objects evolve according to given rules in the compartments defined by a membrane structure and compute natural numbers as the result of halting sequences of transitions. The model is parallel, nondeterministic. Many variants have already been considered and many problems about them were investigated. We present here some of these variants, focusing on two central classes of results: (1) characterizations of the recursively enumerable sets of numbers and (2) possibilities to solve NP-complete problems in polynomial - even linear - time (of course, by making use of an exponential space). The results are given without proofs. An almost complete bibliography of the domain, at the middle of October 2000, is also provided. Copyright {\textcopyright} 2001 Elsevier Science Ireland Ltd.},
author = {Păun, Gheorghe},
doi = {10.1016/S0303-2647(00)00143-X},
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Păun - 2001 - From cells to computers computing with membranes (P systems).pdf:pdf},
issn = {03032647},
journal = {Biosystems},
keywords = {Membrane computing,Molecular computing,NP-complete problem,Natural computing,P system,Turing computability},
% mendeley-groups = {PhD/FP/P Systems},
month = {3},
number = {3},
pages = {139--158},
% pmid = {11311465},
title = {{From cells to computers: computing with membranes (P systems)}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S030326470000143X},
volume = {59},
year = {2001}
}

@inproceedings{Aboy2019,
abstract = {Spiking Neural P systems (in short, SNP systems) are computing models based on living neurons. SNP systems are non-deterministic and parallel, hence making use of a parallel processor such as a graphics processing unit (in short, GPU) is a natural candidate for simulations. Matrix representations and algorithms were previously developed for simulating SNP systems. In this work, our two results extend previous works in simulating SNP systems in the GPU: (a) the number of neurons the simulator can handle is now arbitrary; (b) SNP systems are now represented in a dense instead of sparse way. The impact in terms of time and space of these extensions to the GPU simulator are analysed. As expected, SNP systems with more neurons need more simulation time, although the simulator performance can scale (i.e. perform better) with larger GPUs. The dense representation helps in the simulation of larger systems.},
author = {Aboy, Blaine Corwyn D. and Bariring, Edward James A. and Carandang, Jym Paul and Cabarle, Francis George C. and Cruz, Ren Tristan De La and Adorna, Henry N. and Martinez-del-Amor, Miguel Angel},
booktitle = {2019 International Conference on High Performance Computing {\&} Simulation (HPCS)},
doi = {10.1109/HPCS48598.2019.9188174},
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Aboy et al. - 2019 - Optimizations in CuSNP Simulator for Spiking Neural P Systems on CUDA GPUs.pdf:pdf},
isbn = {978-1-7281-4484-9},
keywords = {CUDA,GPU computing,Membrane computing,Sparse Matrix-Vector,Spiking neural P systems},
% mendeley-groups = {PhD/FP/P Systems},
month = {7},
pages = {535--542},
publisher = {IEEE},
title = {{optimizations in CuSNP Simulator for Spiking Neural P Systems on CUDA GPUs}},
url = {https://ieeexplore.ieee.org/document/9188174/},
year = {2019}
}

@incollection{Zeng2010,
abstract = {Spiking neural P systems (SN P systems, for short) are a class of distributed parallel computing devices inspired from the way neurons communicate by means of spikes. In this work, a discrete structure representation of SN P systems with extended rules and without delay is proposed. Specifically, matrices are used to represent SN P systems. In order to represent the computations of SN P systems by matrices, configuration vectors are defined to monitor the number of spikes in each neuron at any given configuration; transition net gain vectors are also introduced to quantify the total amount of spikes consumed and produced after the chosen rules are applied. Nondeterminism of the systems is assured by a set of spiking transition vectors that could be used at any given time during the computation. With such matrix representation, it is quite convenient to determine the next configuration from a given configuration, since it involves only multiplication and addition of matrices after deciding the spiking transition vector.},
author = {Zeng, Xiangxiang and Adorna, Henry and Mart{\'{i}}nez-Del-Amor, Miguel {\'{A}}ngel and Pan, Linqiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-18123-8_29},
editor="Gheorghe, Marian
and Hinze, Thomas
and P{\u{a}}un, Gheorghe
and Rozenberg, Grzegorz
and Salomaa, Arto",
file = {:D$\backslash$:/Users/jcoo092/Documents/Mendeley Desktop/Zeng et al. - 2010 - Matrix Representation of Spiking Neural P Systems.pdf:pdf},
isbn = {9783642181221},
% issn = {16113349},
% mendeley-groups = {PhD/FP/P Systems},
pages = {377--391},
title = {{Matrix Representation of Spiking Neural P Systems}},
url = {http://link.springer.com/10.1007/978-3-642-18123-8{\_}29},
volume = {6501 LNCS},
year = {2010}
}
