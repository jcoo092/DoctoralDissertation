% TODO:  Check for consistency with other versions of the entry
% @article{Reppy1991,
% abstract = {An abstract is not available.},
% author = {Reppy, John H.},
% doi = {10.1145/113446.113470},
% file = {:C$\backslash$:/Users/J/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Reppy - 1991 - CML A Higher-order Concurrent Language.pdf:pdf},
% isbn = {0-89791-428-7},
% issn = {03621340},
% journal = {ACM SIGPLAN Notices},
% % mendeley-groups = {PhD/FP},
% month = {6},
% number = {6},
% pages = {293--305},
% title = {{CML}},
% volume = {26},
% year = {1991}
% }

@article{Gheorghe2013,
abstract = {This paper presents the newly introduced class of (simple) kernel P systems ((s)kP systems) and investigates through a 3-colouring problem case study the expressive power and efficiency of kernel P systems. It describes two skPsystems that model the problem and analyzes them in terms of efficiency and complexity. The skP models prove to be more succinct (in terms of number of rules, objects, number of cells and execution steps) than the corresponding tissue P system, availablein the literature, that solves the same problem, at the expense of a greater length of the rules.},
author = {Gheorghe, Marian and Ipate, Florentin and Lefticaru, Raluca and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Ţurcanu, Adrian and {Valencia Cabrera}, Luis and Garc{\'{i}}a-Quismondo, Manuel and Mierlă, Laurenţiu},
doi = {10.1080/00207160.2012.743712},
file = {:C$\backslash$:/Users/J/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Gheorghe et al. - 2013 - 3-Col problem modelling using simple kernel P systems.pdf:pdf},
issn = {0020-7160},
journal = {International Journal of Computer Mathematics},
keywords = {3-colour problem,formal verification,kernel P systems,membrane computing,tissue P systems},
% mendeley-groups = {PhD},
month = {4},
number = {4},
pages = {816--830},
title = {{3-Col problem modelling using simple kernel P systems}},
volume = {90},
year = {2013}
}

% TODO:  Check for consistency with other versions of the entry
% @article{Cooper2019,
% author = {Cooper, James and Nicolescu, Radu},
% doi = {10.3233/FI-2019-1760},
% journal = {Fundamenta Informaticae},
% number = {2-3},
% pages = {157--180},
% title = {{The Hamiltonian Cycle and Travelling Salesman Problems in cP Systems}},
% volume = {164},
% year = {2019}
% }

@article{Beigel2005,
abstract = {We consider worst case time bounds for several NP-complete problems, based on a constraint satisfaction (CSP) formulation of these problems: (a,b)-CSP instances consist of a set of variables, each with up to a possible values, and constraints disallowing certain b-tuples of variable values; a problem is solved by assigning values to all variables satisfying all constraints, or by showing that no such assignment exist. 3-SAT is equivalent to (2,3)-CSP while 3-coloring and various related problems are special cases of (3,2)-CSP; there is also a natural duality transformation from (a,b)-CSP to (b,a)-CSP. We show that n-variable (3,2)-CSP instances can be solved in time O(1.3645n), that satisfying assignments to (d,2)-CSP instances can be found in randomized expected time O((0.4518d)n); that 3-coloring of n-vertex graphs can be solved in time O(1.3289n); that 3-list-coloring of n-vertex graphs can be solved in time O(1.3645n); that 3-edge-coloring of n-vertex graphs can be solved in time O(2n/2), and that 3-satisfiability of a formula with t 3-clauses can be solved in time O(nO(1)+1.3645t). {\textcopyright} 2004 Elsevier Inc. All rights reserved.},
archivePrefix = {arXiv},
% arxivId = {cs/0006046},
author = {Beigel, Richard and Eppstein, David},
doi = {10.1016/j.jalgor.2004.06.008},
eprint = {0006046},
file = {:D$\backslash$:/Users/jcoo092/Writing/2018/ACMC18/Reference papers/1-s2.0-S0196677404001117-main.pdf:pdf},
issn = {01966774},
journal = {Journal of Algorithms},
month = {2},
number = {2},
pages = {168--204},
primaryClass = {cs},
title = {{3-coloring in \(O(1.3289^n)\) time}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0196677404001117},
volume = {54},
year = {2005}
}

@book{Lewis2016,
abstract = {This book treats graph colouring as an algorithmic problem, with a strong emphasis on practical applications. The author describes and analyses some of the best-known algorithms for colouring arbitrary graphs, focusing on whether these heuristics can provide optimal solutions in some cases; how they perform on graphs where the chromatic number is unknown; and whether they can produce better solutions than other algorithms for certain types of graphs, and why. The introductory chapters explain graph colouring, and bounds and constructive algorithms. The author then shows how advanced, modern techniques can be applied to classic real-world operational research problems such as seating plans, sports scheduling, and university timetabling. He includes many examples, suggestions for further reading, and historical notes, and the book is supplemented by a website with an online suite of downloadable code. The book will be of value to researchers, graduate students, and practitioners in the areas of operations research, theoretical computer science, optimization, and computational intelligence. The reader should have elementary knowledge of sets, matrices, and enumerative combinatorics.},
address = {Cham},
author = {Lewis, R.M.R.},
doi = {10.1007/978-3-319-25730-3},
file = {:H$\backslash$:/Documents/Textbooks/Theoretical Computer Science/2016{\_}Book{\_}AGuideToGraphColouring.pdf:pdf},
isbn = {978-3-319-25728-0},
keywords = {Combinatorial Optimization,Graph Theory,Heuristics,Metaheuristics,Operations Research,Optimization,Scheduling},
publisher = {Springer International Publishing},
title = {{A Guide to Graph Colouring}},
url = {http://link.springer.com/10.1007/978-3-319-25730-3},
year = {2016}
}

% TODO:  Check for consistency with other versions of the entry
% @inbook{Panangaden1997,
% abstract = {Concurrent ML (CML) is a programming language that integrates high-level abstraction mechanisms with concurrency primitives. Like other similar, recent languages, CML embodies the idea that concurrent programming can be done in a modern high-level language like ML. The fundamental new ingredient is the notion of a (polymorphic) event. This is a piece of code packaged as a new abstraction. Combinators are provided to build new events from old ones. The key subtlety is the interaction of external choice with abstraction. Ordinary functional abstraction conceals the communication actions on which choices need to be made. The event mechanism allows one to build abstractions that expose the communication. The language CML features mobility, polymorphism, and ordinary lambda-abstraction as well as events. In this article we discuss the basic features and explain how CML can be used to implement new concurrent abstractions.},
% address = {New York, NY},
% author = {Panangaden, Prakash and Reppy, John},
% booktitle = {ML with Concurrency: Design, Analysis, Implementation, and Application},
% doi = {10.1007/978-1-4612-2274-3\_2},
% editor = {Nielson, Flemming},
% file = {:H\$\backslash\$:/2018/Papers/To Read/Panangaden-Reppy1997{\_}Chapter{\_}TheEssenceOfConcurrentML.pdf:pdf},
% isbn = {978-1-4612-2274-3},
% % mendeley-groups = {PhD/FP},
% pages = {5--29},
% publisher = {Springer New York},
% title = {{The Essence of Concurrent ML}},
% url = {https://doi.org/10.1007/978-1-4612-2274-3{\_}2 //http://link.springer.com/10.1007/978-1-4612-2274-3{\_}2},
% year = {1997}
% }

% TODO:  Check for consistency with other versions of the entry
% @book{Reppy2007,
% address = {New York, New York, USA},
% author = {Reppy, John H.},
% isbn = {978-0-521-71472-3},
% keywords = {concurrent ml},
% % mendeley-groups = {PhD/Parallel},
% pages = {308},
% publisher = {Cambridge University Press},
% title = {{Concurrent Programming in ML}},
% year = {2007}
% }

@article{Csuhaj-Varju2011,
abstract = {Generalized communicating P systems are purely communicating tissue-like membrane systems with communication rules which allow the movement of only pairs of objects. In this paper, we study the power of these systems in the case of eight restricted variants of communication rules. We show that seven of these restrictions lead to computational completeness, while using the remaining one the systems are able to compute only finite singletons of non-negative integers. The obtained results complete the investigations of the computational power of generalized communicating P systems and provide further examples for simple architectures with simple functioning rules which are as powerful as Turing machines. {\textcopyright} 2010 Elsevier B.V. All rights reserved.},
author = {Csuhaj-Varj{\'{u}}, Erzs{\'{e}}bet and Verlan, Sergey},
doi = {10.1016/j.tcs.2010.08.020},
file = {:D$\backslash$:/Users/jcoo092/Writing/2018/ACMC18/Reference papers/Csuhaj-Varj{\'{u}}, Verlan - On generalized communicating P systems with minimal interaction rules - 2011.pdf:pdf},
issn = {03043975},
journal = {Theoretical Computer Science},
keywords = {Antiport,Computational completeness,Formal languages,Minimal interactions,P systems,Symport},
% % mendeley-groups = {PhD},
month = {1},
number = {1-2},
pages = {124--135},
% publisher = {Elsevier B.V.},
title = {{On generalized communicating P systems with minimal interaction rules}},
url = {http://dx.doi.org/10.1016/j.tcs.2010.08.020 http://linkinghub.elsevier.com/retrieve/pii/S030439751000455X},
volume = {412},
year = {2011}
}

@article{Song2016,
abstract = {{\textcopyright} 2002-2011 IEEE. Tissue P systems with channel states are a class of bio-inspired parallel computational models, where rules are used in a sequential manner (on each channel, at most one rule can be used at each step). In this work, tissue P systems with channel states working in a flat maximally parallel way are considered, where at each step, on each channel, a maximal set of applicable rules that pass from a given state to a unique next state, is chosen and each rule in the set is applied once. The computational power of such P systems is investigated. Specifically, it is proved that tissue P systems with channel states and antiport rules of length two are able to compute Parikh sets of finite languages, and such P systems with one cell and noncooperative symport rules can compute at least all Parikh sets of matrix languages. Some Turing universality results are also provided. Moreover, the NP-complete problem SAT is solved by tissue P systems with channel states, cell division and noncooperative symport rules working in the flat maximally parallel way; nevertheless, if channel states are not used, then such P systems working in the flat maximally parallel way can solve only tractable problems. These results show that channel states provide a frontier of tractability between efficiency and non-efficiency in the framework of tissue P systems with cell division (assuming P = NP).},
author = {Song, Bosheng and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Păun, Gheorghe and Pan, Linqiang},
doi = {10.1109/TNB.2016.2594380},
file = {:D$\backslash$:/Users/jcoo092/Writing/2018/ACMC18/Reference papers/Song et al. - Tissue P Systems With Channel States Working in the Flat Maximally Parallel Way - 2016.pdf:pdf},
issn = {1536-1241},
journal = {IEEE Transactions on NanoBioscience},
keywords = {Bio-inspired computing,channel state,flat maximal parallelism,membrane computing,tissue P system,tractability border},
% mendeley-groups = {PhD/P Systems},
month = {10},
number = {7},
pages = {645--656},
title = {{Tissue P Systems With Channel States Working in the Flat Maximally Parallel Way}},
url = {http://ieeexplore.ieee.org/document/7523387/},
volume = {15},
year = {2016}
}

@article{Paun2008,
abstract = {In tissue P systems several cells (elementary membranes) communicate through symport/antiport rules, thus carrying out a computation. We add to such systems the basic feature of (cell–like) P systems with active membranes – the possibility to divide cells. As expected (as it is the case for P systems with active membranes), in this way we get the possibility to solve computationally hard problems in polynomial time; we illustrate this possibility with SAT problem.},
archivePrefix = {arXiv},
% arxivId = {1841-9836},
author = {Păun, Gheorghe and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Riscos-Núñez, Agust{\'{i}}n},
doi = {10.15837/ijccc.2008.3.2397},
eprint = {1841-9836},
file = {:D$\backslash$:/Users/jcoo092/Writing/2018/ACMC18/Reference papers/Păun, Perez-Jimenez, Riscos-Nunez - Tissue P Systems with Cell Division - 2008.pdf:pdf},
% isbn = {84-688-6101-4},
issn = {1841-9836},
journal = {International Journal of Computers Communications {\&} Control},
keywords = {NP-complete problem,SAT problem,Tissue-like P systems,cell division rule},
month = {9},
number = {3},
pages = {295},
title = {{Tissue P Systems with Cell Division}},
url = {http://www.journal.univagora.ro/?page=article{\_}details{\&}id=139 http://univagora.ro/jour/index.php/ijccc/article/view/2397},
volume = {3},
year = {2008}
}

@inproceedings{Verlan2005,
abstract = {We show that tissue P systems with symport/antiport having 3 cells and symport/antiport rules of minimal weight generate all recursively enumerable sets of numbers. Constructed systems simulate register machines and have purely deterministic behaviour. Moreover, only 2 symport rules are used and all symbols of any system are present in finite number of copies (except for symbols corresponding to registers of the machine). At the end of the article some open problems are formulated.},
address = {Berlin, Heidelberg},
author = {Verlan, Sergey},
booktitle = {Developments in Language Theory},
doi = {10.1007/978-3-540-30550-7\_35},
editor = {Calude, Cristian S and Calude, Elena and Dinneen, Michael J},
file = {:D$\backslash$:/Users/jcoo092/Writing/2018/ACMC18/Reference papers/Verlan2005{\_}Chapter{\_}TissuePSystemsWithMinimalSympo.pdf:pdf},
isbn = {978-3-540-30550-7},
pages = {418--429},
publisher = {Springer Berlin Heidelberg},
title = {{Tissue P Systems with Minimal Symport/Antiport}},
url = {http://link.springer.com/10.1007/978-3-540-30550-7{\_}35},
year = {2005}
}

@article{Diaz-Pernil2008,
abstract = {Several examples of the efficiency of cell-like P systems regarding the solution of NP-complete problems in polynomial time can be found in the literature(obviously, trading space for time). Recently, different new models of tissue-like P systems have received much attention from the scientific community. In this paper we present a linear-time solution to an NP-complete problem from graph theory, the 3-coloring problem, and we discuss the suitability of tissue-like P systems as a framework to address the efficient solution to intractable problems.},
annote = {Membrane Computing and Biologically Inspired Process Calculi},
author = {D{\'{i}}az-Pernil, Daniel and Guti{\'{e}}rrez-Naranjo, Miguel A. and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n},
doi = {10.1016/j.tcs.2008.04.005},
% isbn = {9783319218182},
issn = {03043975},
journal = {Theoretical Computer Science},
keywords = {3-Coloring problem,Membrane computing,Protein on cells,Tissue P system},
% % mendeley-groups = {PhD},
month = {9},
number = {1-2},
pages = {76--87},
title = {{A uniform family of tissue P systems with cell division solving 3-COL in a linear time}},
url = {http://www.sciencedirect.com/science/article/pii/S030439750800251X https://linkinghub.elsevier.com/retrieve/pii/S030439750800251X},
volume = {404},
year = {2008}
}

@inproceedings{Perez-Hurtado2010,
abstract = {In recent years, the increasing importance of the$\backslash$ncomputational systems biology is leading to an impressive growth$\backslash$nof the knowledge of several real-life phenomena. In this framework,$\backslash$nmembrane computing is an emergent branch within natural$\backslash$ncomputing that has been succesfully used to model biological$\backslash$nphenomena. The study of these phenomena usually requires the$\backslash$nexecution of virtual experiments using mechanisms of simulation,$\backslash$nimplying the development of ad-hoc tools to simulate. However,$\backslash$nthe advance of the research is demanding general solutions$\backslash$nto avoid the necessity of custom software developments for$\backslash$neach matter of study, when there are some common problems$\backslash$nto resolve. MeCoSim (Membrane Computing Simulator) is a$\backslash$nfirst step in this direction providing the users a customizable$\backslash$napplication to generate custom simulators based on membrane$\backslash$ncomputing by simply writing a configuration file.},
address = {Changsha, China},
author = {P{\'{e}}rez-Hurtado, Ignacio and Valencia-Cabrera, L. and P{\'{e}}rez-Jim{\'{e}}nez, Mario J. and Colomer, M. Angels and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n},
booktitle = {2010 IEEE Fifth International Conference on Bio-Inspired Computing: Theories and Applications (BIC-TA)},
doi = {10.1109/BICTA.2010.5645199},
editor = {Li, Kenli and Tang, Zhuo and Li, Renfa and Nagar, Atulya K. and Thamburaj, Robinson},
file = {:D$\backslash$:/Users/jcoo092/Writing/2018/ACMC18/Reference papers/Perez-Hurtado et al. - MeCoSim A general purpose software tool for simulating biological phenomena by means of P systems - 2010.pdf:pdf},
isbn = {978-1-4244-6437-1},
% mendeley-groups = {PhD/P Systems},
month = {9},
pages = {637--643},
publisher = {IEEE},
title = {{MeCoSim: A general purpose software tool for simulating biological phenomena by means of P systems}},
url = {http://ieeexplore.ieee.org/document/5645199/},
year = {2010}
}

% @inproceedings{Perez-Hurtado2018,
% abstract = {Since the beginnings of membrane computing, software and hardware tools have been implemented for simulating computations of the proposed models. Some of these simulators are relatively generic, providing enough flexibility for a wide variety of models and others are ad-hoc simulators that reproduce computations of a single design that has been hard-coded or computations of a single type of model. On the one hand, generic tools are excellent assistants for the researchers while verifying their designs. On the other hand, the efficiency of specific tools in terms of simulation performance for a given design sacrifices the flexibility of the previous ones. In this paper, it is presented for the first time a tool that breaks this duality, we have implemented a compiler which receives as input the definition of a design in the P-Lingua language and produces as output source code in the C++ language for an ad-hoc simulator that has been optimized for the input design. The objective of this work is twofold: On the one hand, we have extended the P-Lingua framework to include some semantic features concerning to the models, such as rule patterns and derivation modes, that can be written in an explicit manner within their own file. On the other hand, we have developed a GNU GPLv3 command-line tool for Linux which works in the same manner as conventional compilers. Finally, we include in this paper a few examples for different types of cell-like and tissue-like models.},
% address = {Auckland, New Zealand},
% author = {P{\'{e}}rez-Hurtado, Ignacio and Orellana-Mart{\'{i}}n, David and Zhang, Gexiang and P{\'{e}}rez-Jim{\'{e}}nez, Mario J.},
% booktitle = {Pre-proceedings of Asian Branch of International Conference on Membrane Computing},
% editor = {Dinneen, Michael J. and Nicolescu, Radu},
% % mendeley-groups = {PhD/P Systems},
% pages = {149--163},
% publisher = {Centre for Discrete Mathematics and Theoretical Computer Science},
% title = {{P-Lingua Compiler: A Tool for Generating Ad-hoc Simulators in Membrane Computing}},
% url = {https://www.cs.auckland.ac.nz/research/groups/CDMTCS/researchreports/publication-list-bydate.php?selected-date=2018},
% year = {2018}
% }

% TODO:  Check for consistency with other versions of the entry
% @article{Ionescu2006,
% abstract = {This paper proposes a way to incorporate the idea of spiking neurons into the area of membrane computing, and to this aim we introduce a class of neural-like P systems which we call spiking neural P systems (in short, SN P systems). In these devices, the time (when the neurons fire and/or spike) plays an essential role. For instance, the result of a computation is the time between the moments when a specified neuron spikes. Seen as number computing devices, SN P systems are shown to be computationally complete (both in the generating and accepting modes, in the latter case also when restricting to deterministic systems). If the number of spikes present in the system is bounded, then the power of SN P systems falls drastically, and we get a characterization of semilinear sets. A series of research topics and open problems are formulated. [ABSTRACT FROM AUTHOR]},
% author = {Ionescu, Mihai and Păun, Gheorghe and Yokomori, Takashi},
% file = {:H$\backslash$:/2018/Papers/To Read/Ionescu, Paun, Yokomori - Spiking Neural P Systems - 2006.pdf:pdf},
% isbn = {2012014213008},
% issn = {01692968},
% journal = {Fundamenta Informaticae},
% keywords = {Cells,Computers,Mathematics,Neurons,Science,Spiking neurons,Turing computability,membrane computing,semilinear set},
% % mendeley-groups = {PhD/P Systems},
% number = {2/3},
% pages = {279--308},
% title = {{Spiking Neural P Systems.}},
% url = {http://search.ebscohost.com/login.aspx?direct=true{\&}db=iih{\&}AN=23094593{\&}site=ehost-live{\&}scope=site},
% volume = {71},
% year = {2006}
% }

% TODO:  Check for consistency with other versions of the entry
% @incollection{Nicolescu2018,
% abstract = {We overview the current state of cP systems and illustrate it with a series of old and new examples, intentionally simple, but fundamental in their areas. cP systems -- i.e. P systems with compound terms -- share the fundamental features of traditional cell-like (tree-based) and tissue (graph-based) P systems: unlimited space and computing power, cells, nested cells, multisets, messages, rewriting rules, possibly running in maximal parallel modes. In contrast to traditional P systems, inner nested cells do not have their own rulesets. However, this restriction is usually more than compensated by their significant extensions: compound Prolog-like terms, high-level rules, control on incoming messages. Additionally, the same rulesets can run in either synchronous or asynchronous mode, without any syntactic change. cP systems have been successfully used to model quite a few fundamental and real-life problems, e.g. in NP complexity, data structures, graph theory, distributed algorithms, image processing. As trademark, cP models use fixed sized alphabets and crisp rulesets, independent of the problem size. The samples cover a wide variety of areas, such as arithmetic, list structures, summary statistics and sorting, asynchronous communications, {\$}{\$}$\backslash$mu {\$}{\$}{\$}\mu{\$}-recursive functions.},
% address = {Cham},
% author = {Nicolescu, Radu and Henderson, Alec},
% booktitle = {Enjoying Natural Computing: Essays Dedicated to Mario de Jes{\'{u}}s P{\'{e}}rez-Jim{\'{e}}nez on the Occasion of His 70th Birthday},
% doi = {10.1007/978-3-030-00265-7_17},
% editor = {Graciani, Carmen and Riscos-N{\'{u}}{\~{n}}ez, Agust{\'{i}}n and Păun, Gheorghe and Rozenberg, Grzegorz and Salomaa, Arto},
% file = {:H$\backslash$:/2019/Papers/To read/Nicolescu-Henderson2018{\_}Chapter{\_}AnIntroductionToCPSystems.pdf:pdf},
% isbn = {978-3-030-00265-7},
% % mendeley-groups = {PhD/P Systems},
% //number = {1},
% pages = {204--227},
% publisher = {Springer International Publishing},
% series = {Lecture Notes in Computer Science},
% title = {{An Introduction to cP Systems}},
% url = {https://doi.org/10.1007/978-3-030-00265-7{\_}17 http://link.springer.com/10.1007/978-3-030-00265-7{\_}17},
% volume = {11270},
% year = {2018}
% }

% TODO:  Check for consistency with other versions of the entry
% @book{Hoare1985,
% address = {Englewood Cliffs, N.J.},
% author = {Hoare, Charles Antony Richard},
% isbn = {0131532898},
% keywords = {Computer programming,Parallel processing (Electronic computers)},
% % mendeley-groups = {PhD/FP/Parallel},
% pages = {256},
% publisher = {Prentice/Hall International},
% series = {Prentice-Hall international series in computer science},
% title = {{Communicating sequential processes}},
% year = {1985}
% }

@book{Ben-Ari2008,
abstract = {The Spin model checker is a widely used professional software tool for specifying and verifying concurrent and distributed systems. Models, written in a simple language called Promela, can be simulated randomly or interactively. Spin can generate efficient verifiers that search for a counterexample to correctness specifications applied to a model. Spin is also a superb tool for teaching important concepts of computer science such as verification, concurrency and nondeterminism. The Promela language is easy to learn, as is the linear temporal logic used for correctness specifications, and the techniques for simulating and verifying models. Principles of Spin is an introductory book for students and practicing software engineers who wish to learn Promela and Spin. The presentation starts with the verification of sequential programs and proceeds in gradual stages to the verification of concurrent and then distributed programs. Complete programs are used to demonstrate each construct and concept, and the source code of these programs, together with that of longer case studies, are available on the companion website. The book describes free software that the author has developed: jSpin—an integrated development environment for Spin, SpinSpider—a visualization tool that automatically constructs graphical state diagrams of concurrent programs, and VN—a Spin-based tool for visualizing nondeterminism of finite automata.},
address = {London},
author = {Ben-Ari, Mordechai},
% booktitle = {Principles of the Spin Model Checker},
doi = {10.1007/978-1-84628-770-1},
isbn = {978-1-84628-769-5},
publisher = {Springer London},
title = {{Principles of the Spin Model Checker}},
url = {http://link.springer.com/10.1007/978-1-84628-770-1},
year = {2008}
}

% @article{Lefticaru2011,
% abstract = {This paper presents an approach to P systems verification using the Spin model checker. The authors have developed a tool which implements the proposed approach and can automatically transform P system specifications from P-Lingua into Promela, the language accepted by the well known model checker Spin. The properties expected for the P system are specified using some patterns, representing high level descriptions of frequently asked questions, formulated in natural language. These properties are automatically translated into LTL specifications for the Promela model and the Spin model checker is run against them. In case a counterexample is received, the Spin trace is decoded and expressed as a P system computation. The tool has been tested on a number of examples and the results obtained are presented in the paper.},
% author = {Lefticaru, Raluca and Tudose, Cristina and Ipate, Florentin},
% doi = {10.4018/jncr.2011070101},
% file = {:D$\backslash$:/Users/jcoo092/Writing/2019/G-Col JMC/Lefticaru, Tudose, Ipate - Towards Automated Verification of P Systems Using Spin - 2011.pdf:pdf},
% issn = {1947-928X},
% journal = {International Journal of Natural Computing Research},
% keywords = {formal verification,model checking,natural language,p systems,p-lingua,spin},
% month = {7},
% number = {3},
% pages = {1--12},
% title = {{Towards Automated Verification of P Systems Using Spin}},
% url = {http://services.igi-global.com/resolvedoi/resolve.aspx?doi=10.4018/jncr.2011070101},
% volume = {2},
% year = {2011}
% }

